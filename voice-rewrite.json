{"meta":{"generator":"0.7.4","format":19,"date":1516466051346},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://swiftly.js.org\"><img src=\"https://swiftly.js.org/static/logo.svg\" width=\"546\" alt=\"swiftly.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/Y4yAKBS\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/swiftly.js\"><img src=\"https://img.shields.io/npm/v/swiftly.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/swiftly.js\"><img src=\"https://img.shields.io/npm/dt/swiftly.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/iilukas/swiftly.js\"><img src=\"https://travis-ci.org/iilukas/swiftly.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/iilukas/swiftly.js\"><img src=\"https://img.shields.io/david/iilukas/swiftly.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/swiftly.js/\"><img src=\"https://nodei.co/npm/swiftly.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\nWelcome to the swiftly.js v12 documentation.\n\nv12 is still very much a work-in-progress, as we're aiming to make it the best it can possibly be before releasing.\nOnly use it if you are fond of living life on the bleeding edge.\n\n## About\nswiftly.js is a powerful [node.js](https://nodejs.org) module that allows you to interact with the\n[Discord API](https://discordapp.com/developers/docs/intro) very easily.\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n**Node.js 8.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install swiftly.js`  \nWith voice support ([node-opus](https://www.npmjs.com/package/node-opus)): `npm install swiftly.js node-opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install swiftly.js opusscript`\n\n### Audio engines\nThe preferred audio engine is node-opus, as it performs significantly better than opusscript. When both are available, swiftly.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for significantly faster WebSocket data inflation (`npm install zlib-sync`)\n- [erlpack](https://github.com/discordapp/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discordapp/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n    - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n    - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [uws](https://www.npmjs.com/package/uws) for a much faster WebSocket connection (`npm install uws`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection when *not* using uws (`npm install bufferutil`)\n\n## Example usage\n```js\nconst Discord = require('swiftly.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n* [Website](https://swiftly.js.org/) ([source](https://github.com/iilukas/website))\n* [Documentation](https://swiftly.js.org/#/docs)\n* [swiftly.js Discord server](https://discord.gg/Y4yAKBS)\n* [Discord API Discord server](https://discord.gg/discord-api)\n* [GitHub](https://github.com/iilukas/swiftly.js)\n* [NPM](https://www.npmjs.com/package/swiftly.js)\n* [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n* [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/iilukas/RPC))\n\n## Contributing\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://swiftly.js.org/#/docs).  \nSee [the contribution guide](https://github.com/iilukas/swiftly.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [swiftly.js Server](https://discord.gg/Y4yAKBS).\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# Version 11.1.0\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/iilukas/swiftly.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/iilukas/swiftly.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n* Message Reactions and Embeds (rich text)\n* Support for uws and erlpack for better performance\n* OAuthApplication support\n* Web distributions\n\n## Breaking changes\n### Client.login() no longer supports logging in with email + password\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60\n});\n```\n\nv10 code example:\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60\n});\n```\n\n## Presences\nPresences have been completely restructured.\nPrevious versions of swiftly.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 swiftly.js code may look something like this:\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\nMany events have been renamed or had their arguments change.\n\n### Client events\n|    Version   9                                       |    Version   10                               |\n|------------------------------------------------------|-----------------------------------------------|\n|    guildMemberAdd(guild, member)                     |    guildMemberAdd(member)                     |\n|    guildMemberAvailable(guild, member)               |    guildMemberAvailable(member)               |\n|    guildMemberRemove(guild, member)                  |    guildMemberRemove(member)                  |\n|    guildMembersChunk(guild, members)                 |    guildMembersChunk(members)                 |\n|    guildMemberUpdate(guild, oldMember, newMember)    |    guildMemberUpdate(oldMember, newMember)    |\n|    guildRoleCreate(guild, role)                      |    roleCreate(role)                           |\n|    guildRoleDelete(guild, role)                      |    roleDelete(role)                           |\n|    guildRoleUpdate(guild, oldRole, newRole)          |    roleUpdate(oldRole, newRole)               |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n| Version 9    | Version 10 |\n|--------------|------------|\n| disconnected | disconnect |\n\n## Dates and timestamps\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n\n# Version 9\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({limit: 100}).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n","path":"docs/general/updating.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\nThese are just questions that get asked frequently, that usually have a common resolution.\nIf you have issues not listed here, please ask in the [official Discord server](https://discord.gg/Y4yAKBS).\nAlways make sure to read the documentation.\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\nUpdate to Node.js 8.0.0 or newer.\n\n## How do I get voice working?\n- Install FFMPEG.\n- Install either the `node-opus` package or the `opusscript` package.\n  node-opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n- **npm:** `npm install --save ffmpeg-binaries`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** See the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up node-opus?\n- **Ubuntu:** Simply run `npm install node-opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install node-opus` in your bot's directory should successfully build it. Woo!\n","path":"docs/general/faq.md"}}},"topics":{"name":"Topics","files":{"voice":{"name":"Voice","type":"md","content":"# Introduction to Voice\nVoice in swiftly.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn swiftly.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n* ffmpeg - `npm install ffmpeg-binaries`\n* an opus encoder, choose one from below:\n  * `npm install node-opus` (better performance)\n  * `npm install opusscript`\n* a good network connection\n\n## Joining a voice channel\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('swiftly.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', async message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voiceChannel) {\n      const connection = await message.member.voiceChannel.join();\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it.\n\n### Introduction to playing on voice connections\nThe most basic example of playing audio over a connection would be playing a local file:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3');\n```\n\nThe `dispatcher` in this case is a `StreamDispatcher` - here you can control the volume and playback of the stream:\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // half the volume\n\ndispatcher.on('finish', () => {\n  console.log('Finished playing!');\n});\n\ndispatcher.destroy(); // end the stream\n```\n\nWe can also pass in options when we first play the stream:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3', {\n  volume: 0.5,\n  passes: 3\n});\n```\n\nThese are just a subset of the options available (consult documentation for a full list). Most users may be interested in the `passes` option, however. As audio is sent over UDP, there is a chance packets may not arrive. Increasing the number of passes, e.g. to `3` gives you a better chance that your packets reach your recipients, at the cost of triple the bandwidth. We recommend not going over 5 passes.\n\n### What can I play?\n\nswiftly.js allows you to play a lot of things:\n\n```js\n// ReadableStreams, in this example YouTube audio\nconst ytdl = require('ytdl-core');\nconnection.play(ytdl(\n  'https://www.youtube.com/watch?v=ZlAU_w7-Xp8',\n  { filter: 'audioonly' }));\n\n// Files on the internet\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n\n// Local files\nconnection.play('/home/discord/audio.mp3');\n```\n\nNew to v12 is the ability to play OggOpus and WebmOpus streams with much better performance by skipping out Ffmpeg. Note this comes at the cost of no longer having volume control over the stream:\n\n```js\nconnection.play(fs.createReadStream('./media.webm'), {\n  type: 'webm/opus'\n});\n\nconnection.play(fs.createReadStream('./media.ogg'), {\n  type: 'ogg/opus'\n});\n```\n\nMake sure to consult the documentation for a full list of what you can play - there's too much to cover here!\n\n## Voice Broadcasts\n\nA voice broadcast is very useful for \"radio\" bots, that play the same audio across multiple channels. It means audio is only transcoded once, and is much better on performance.\n\n```js\nconst broadcast = client.createVoiceBroadcast();\n\nbroadcast.on('subscribe', dispatcher => {\n  console.log('New broadcast subscriber!');\n});\n\nbroadcast.on('unsubscribe', dispatcher => {\n  console.log('Channel unsubscribed from broadcast :(');\n})\n```\n\n`broadcast` is an instance of `VoiceBroadcast`, which has the same `play` method you are used to with regular VoiceConnections:\n\n```js\nconst dispatcher = broadcast.play('./audio.mp3');\n\nconnection.play(broadcast);\n```\n\nIt's important to note that the `dispatcher` stored above is a `BroadcastDispatcher` - it controls all the dispatcher subscribed to the broadcast, e.g. setting the volume of this dispatcher affects the volume of all subscribers.\n\n## Voice Receive\ncoming soon™\n","path":"docs/topics/voice.md"},"web":{"name":"Web builds","type":"md","content":"# Web builds\nIn addition to your usual Node applications, swiftly.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Restrictions\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the native optional packages are usable.\n\n### Require Library\nIf you are making your own webpack project, you can require `swiftly.js/browser` wherever you need to use swiftly.js, like so:\n```js\nconst Discord = require('swiftly.js/browser');\n// do something with Discord like you normally would\n```\n\n### Webpack File\nYou can obtain your desired version of swiftly.js' web build from the [webpack branch](https://github.com/iilukas/swiftly.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing swiftly.js with `require('swiftly.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n#### Example\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n","path":"docs/topics/web.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/*\n  A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n*/\n\n// Import the swiftly.js module\nconst Discord = require('swiftly.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n// The token of your bot - https://discordapp.com/developers/applications/me\nconst token = 'your bot token here';\n\n// The ready event is vital, it means that your bot will only start reacting to information\n// from Discord _after_ ready is emitted\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in\nclient.login(token);\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/*\n  Send a user a link to their avatar\n*/\n\n// Import the swiftly.js module\nconst Discord = require('swiftly.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n// The token of your bot - https://discordapp.com/developers/applications/me\nconst token = 'your bot token here';\n\n// The ready event is vital, it means that your bot will only start reacting to information\n// from Discord _after_ ready is emitted\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in\nclient.login(token);\n","path":"docs/examples/avatars.js"},"greeting":{"name":"Server greeting","type":"js","content":"/*\n  A bot that welcomes new guild members when they join\n*/\n\n// Import the swiftly.js module\nconst Discord = require('swiftly.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n// The token of your bot - https://discordapp.com/developers/applications/me\nconst token = 'your bot token here';\n\n// The ready event is vital, it means that your bot will only start reacting to information\n// from Discord _after_ ready is emitted\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.find('name', 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in\nclient.login(token);\n","path":"docs/examples/greeting.js"},"webhook":{"name":"Webhook","type":"js","content":"/*\n  Send a message using a webhook\n*/\n\n// Import the swiftly.js module\nconst Discord = require('swiftly.js');\n\n// Create a new webhook\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n","path":"docs/examples/webhook.js"}}}},"classes":[{"name":"BaseClient","description":"The base class for all clients.","extends":["EventEmitter"],"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":18,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":25,"file":"BaseClient.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":32,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":39,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":48,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","meta":{"line":55,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":69,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":82,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":104,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":10,"file":"BaseClient.js","path":"src/client"}},{"name":"Client","description":"The main hub for interacting with the Discord API, and the starting point for any bot.","extends":["BaseClient"],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"manager","description":"The manager of the client","access":"private","type":[[["ClientManager"]]],"meta":{"line":49,"file":"Client.js","path":"src/client"}},{"name":"ws","description":"The WebSocket manager of the client","access":"private","type":[[["WebSocketManager"]]],"meta":{"line":56,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The action manager of the client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":63,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The voice manager of the client (`null` in browsers)","access":"private","nullable":true,"type":[[["ClientVoiceManager"]]],"meta":{"line":70,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":76,"file":"Client.js","path":"src/client"}},{"name":"users","description":"All of the {@link User} objects that have been cached at any point, mapped by their IDs","type":[[["UserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":82,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"All of the guilds the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of","type":[[["GuildStore","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":89,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* channel in *every* guild the bot\nis a member of, and all DM channels","type":[[["ChannelStore","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":97,"file":"Client.js","path":"src/client"}},{"name":"presences","description":"Presences that have been received for the client user's friends, mapped by user IDs\n<warn>This is only filled when using a user account.</warn>","type":[[["ClientPresenceStore","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":104,"file":"Client.js","path":"src/client"}},{"name":"token","description":"Authorization token for the logged in user/bot\n<warn>This should be kept private at all times.</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":113,"file":"Client.js","path":"src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":122,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\n(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":129,"file":"Client.js","path":"src/client"}},{"name":"broadcasts","description":"Active voice broadcasts that have been created","type":[[["Array","<"],["VoiceBroadcast",">"]]],"meta":{"line":135,"file":"Client.js","path":"src/client"}},{"name":"pings","description":"Previous heartbeat pings of the websocket (most recent first, limited to three elements)","type":[[["Array","<"],["number",">"]]],"meta":{"line":141,"file":"Client.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link Client#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":148,"file":"Client.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link Client#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":155,"file":"Client.js","path":"src/client"}},{"name":"_pingTimestamp","description":"Timestamp of the latest ping's start time","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":168,"file":"Client.js","path":"src/client"}},{"name":"status","description":"Current status of the client's connection to Discord","readonly":true,"nullable":true,"type":[[["Status"]]],"meta":{"line":177,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"How long it has been since the client last entered the `READY` state","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":186,"file":"Client.js","path":"src/client"}},{"name":"ping","description":"Average heartbeat ping of the websocket, obtained by averaging the {@link Client#pings} property","readonly":true,"type":[[["number"]]],"meta":{"line":195,"file":"Client.js","path":"src/client"}},{"name":"voiceConnections","description":"All active voice connections that have been established, mapped by guild ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":204,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"All custom emojis that the client has access to, mapped by their IDs","readonly":true,"type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":214,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"Timestamp of the time the client was last `READY` at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":227,"file":"Client.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":18,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":25,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":48,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"createVoiceBroadcast","description":"Creates a voice broadcast.","returns":[[["VoiceBroadcast"]]],"meta":{"line":235,"file":"Client.js","path":"src/client"}},{"name":"login","description":"Logs the client in, establishing a websocket connection to Discord.\n<info>Both bot and regular user accounts are supported, but it is highly recommended to use a bot account whenever\npossible. User accounts are subject to harsher ratelimits and other restrictions that don't apply to bot accounts.\nBot accounts also have access to many features that user accounts cannot utilise. User accounts that are found to\nbe abusing/overusing the API will be banned, locking you out of Discord entirely.</info>","examples":["client.login('my token');"],"params":[{"name":"token","description":"Token of the account to log in with","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Token of the account used"},"meta":{"line":252,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Logs out, terminates the connection to Discord, and destroys the client.","returns":[[["Promise"]]],"meta":{"line":267,"file":"Client.js","path":"src/client"}},{"name":"syncGuilds","description":"Requests a sync of guild data with Discord.\n<info>This can be done automatically every 30 seconds by enabling {@link ClientOptions#sync}.</info>\n<warn>This is only available when using a user account.</warn>","params":[{"name":"guilds","description":"An array or collection of guilds to sync","optional":true,"default":"this.guilds","type":[[["Array","<"],["Guild",">"]],[["Collection","<"],["Snowflake",", "],["Guild",">"]]]}],"meta":{"line":278,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Obtains an invite from Discord.","examples":["client.fetchInvite('https://discord.gg/Y4yAKBS')\n .then(invite => {\n   console.log(`Obtained invite with code: ${invite.code}`);\n }).catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":296,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Obtains a webhook from Discord.","examples":["client.fetchWebhook('id', 'token')\n .then(webhook => {\n   console.log(`Obtained webhook with name: ${webhook.name}`);\n }).catch(console.error);"],"params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token for the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":313,"file":"Client.js","path":"src/client"}},{"name":"fetchVoiceRegions","description":"Obtains the available voice regions from Discord.","examples":["client.fetchVoiceRegions()\n .then(regions => {\n   console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`);\n }).catch(console.error);"],"returns":[[["Collection","<"],["string",", "],["VoiceRegion",">"]]],"meta":{"line":326,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.","examples":["// Remove all messages older than 1800 seconds from the messages cache\nconst amount = client.sweepMessages(1800);\nconsole.log(`Successfully removed ${amount} messages from the cache.`);"],"params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"},"meta":{"line":346,"file":"Client.js","path":"src/client"}},{"name":"fetchApplication","description":"Obtains the OAuth Application of the bot from Discord.","examples":["client.fetchApplication('id')\n .then(application => {\n   console.log(`Obtained application with name: ${application.name}`);\n }).catch(console.error);"],"params":[{"name":"id","description":"ID of application to fetch","optional":true,"default":"'@me'","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":387,"file":"Client.js","path":"src/client"}},{"name":"generateInvite","description":"Generates a link that can be used to invite the bot to a guild.\n<warn>This is only available when using a bot account.</warn>","examples":["client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n  .then(link => {\n    console.log(`Generated bot invite link: ${link}`);\n  }).catch(console.error);"],"params":[{"name":"permissions","description":"Permissions to request","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]],[["number"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":403,"file":"Client.js","path":"src/client"}},{"name":"_pong","description":"Adds a ping to {@link Client#pings}.","access":"private","params":[{"name":"startTime","description":"Starting time of the ping","type":[[["number"]]]}],"meta":{"line":419,"file":"Client.js","path":"src/client"}},{"name":"_eval","description":"Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.","access":"private","params":[{"name":"script","description":"Script to eval","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":432,"file":"Client.js","path":"src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":441,"file":"Client.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":69,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":82,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":104,"file":"BaseClient.js","path":"src/client"}}],"events":[{"name":"channelDelete","description":"Emitted whenever a channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GroupDMChannel"]],[["GuildChannel"]]]}],"meta":{"line":23,"file":"ChannelDelete.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable","type":[[["Guild"]]]}],"meta":{"line":51,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"emojiCreate","description":"Emitted whenever a custom emoji is created in a guild.","params":[{"name":"emoji","description":"The emoji that was created","type":[[["GuildEmoji"]]]}],"meta":{"line":12,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"emojiDelete","description":"Emitted whenever a custom emoji is deleted in a guild.","params":[{"name":"emoji","description":"The emoji that was deleted","type":[[["GuildEmoji"]]]}],"meta":{"line":12,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"emojiUpdate","description":"Emitted whenever a custom emoji is updated in a guild.","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["GuildEmoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["GuildEmoji"]]]}],"meta":{"line":12,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]}],"meta":{"line":21,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created","type":[[["Role"]]]}],"meta":{"line":18,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted","type":[[["Role"]]]}],"meta":{"line":22,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update","type":[[["Role"]]]}],"meta":{"line":31,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update","type":[[["Guild"]]]}],"meta":{"line":25,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"message","description":"Emitted whenever a message is created.","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":33,"file":"MessageCreate.js","path":"src/client/actions"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted.","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":22,"file":"MessageDelete.js","path":"src/client/actions"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk.","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]}],"meta":{"line":28,"file":"MessageDeleteBulk.js","path":"src/client/actions"}},{"name":"messageReactionAdd","description":"Emitted whenever a reaction is added to a message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that applied the guild or reaction emoji","type":[[["User"]]]}],"meta":{"line":32,"file":"MessageReactionAdd.js","path":"src/client/actions"}},{"name":"messageReactionRemove","description":"Emitted whenever a reaction is removed from a message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the emoji or reaction emoji","type":[[["User"]]]}],"meta":{"line":33,"file":"MessageReactionRemove.js","path":"src/client/actions"}},{"name":"messageReactionRemoveAll","description":"Emitted whenever all reactions are removed from a message.","params":[{"name":"message","description":"The message the reactions were removed from","type":[[["Message"]]]}],"meta":{"line":19,"file":"MessageReactionRemoveAll.js","path":"src/client/actions"}},{"name":"userNoteUpdate","description":"Emitted whenever a note is updated.","params":[{"name":"user","description":"The user the note belongs to","type":[[["User"]]]},{"name":"oldNote","description":"The note content before the update","type":[[["string"]]]},{"name":"newNote","description":"The note content after the update","type":[[["string"]]]}],"meta":{"line":22,"file":"UserNoteUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings.","params":[{"name":"info","description":"The warning","type":[[["string"]]]}],"meta":{"line":482,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information.","params":[{"name":"info","description":"The debug information","type":[[["string"]]]}],"meta":{"line":488,"file":"Client.js","path":"src/client"}},{"name":"channelCreate","description":"Emitted whenever a channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["DMChannel"]],[["GroupDMChannel"]],[["GuildChannel"]]]}],"meta":{"line":11,"file":"ChannelCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event, not much information\ncan be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occured in","type":[[["DMChannel"]],[["GroupDMChannel"]],[["TextChannel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":25,"file":"ChannelPinsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["DMChannel"]],[["GroupDMChannel"]],[["GuildChannel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["DMChannel"]],[["GroupDMChannel"]],[["GuildChannel"]]]}],"meta":{"line":15,"file":"ChannelUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildBanAdd.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":13,"file":"GuildBanRemove.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":21,"file":"GuildCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildDelete","description":"Emitted whenever a guild kicks the client or the guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":10,"file":"GuildDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":23,"file":"GuildMemberAdd.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]}],"meta":{"line":21,"file":"GuildMembersChunk.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":16,"file":"GuildMemberUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":15,"file":"MessageUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence changes, or they change one of their details.","params":[{"name":"oldMember","description":"The member before the presence update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the presence update","type":[[["GuildMember"]]]}],"meta":{"line":54,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":61,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberAvailable","description":"Emitted whenever a member becomes available in a large guild.","params":[{"name":"member","description":"The member that became available","type":[[["GuildMember"]]]}],"meta":{"line":68,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"resumed","description":"Emitted whenever a WebSocket resumes.","params":[{"name":"replayed","description":"The number of events that were replayed","type":[[["number"]]]}],"meta":{"line":22,"file":"Resumed.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":54,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStop","description":"Emitted whenever a user stops typing in a channel.","params":[{"name":"channel","description":"The channel the user stopped typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that stopped typing","type":[[["User"]]]}],"meta":{"line":61,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"clientUserGuildSettingsUpdate","description":"Emitted whenever the client user's settings update.","params":[{"name":"clientUserGuildSettings","description":"The new client user guild settings","type":[[["ClientUserGuildSettings"]]]}],"meta":{"line":15,"file":"UserGuildSettingsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"clientUserSettingsUpdate","description":"Emitted whenever the client user's settings update.","params":[{"name":"clientUserSettings","description":"The new client user settings","type":[[["ClientUserSettings"]]]}],"meta":{"line":12,"file":"UserSettingsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"voiceStateUpdate","description":"Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldMember","description":"The member before the voice state update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the voice state update","type":[[["GuildMember"]]]}],"meta":{"line":29,"file":"VoiceStateUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"ready","description":"Emitted when the client becomes ready to start working.","meta":{"line":109,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"Emitted whenever the client tries to reconnect to the WebSocket.","meta":{"line":335,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"error","description":"Emitted whenever the client's WebSocket encounters a connection error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":352,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"disconnect","description":"Emitted when the client's WebSocket disconnects and will no longer attempt to reconnect.","params":[{"name":"event","description":"The WebSocket close event","type":[[["CloseEvent"]]]}],"meta":{"line":378,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.timeout","description":"Timeout in ms","type":[[["number"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.timeDifference","description":"Delta-T in ms between your system and Discord servers","type":[[["number"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.route","description":"Route used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":39,"file":"RequestHandler.js","path":"src/rest/handlers"}},{"name":"guildMemberSpeaking","description":"Emitted once a guild member starts/stops speaking.","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"Whether or not the member is speaking","type":[[["boolean"]]]}],"meta":{"line":969,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":27,"file":"Client.js","path":"src/client"}},{"name":"ClientManager","description":"Manages the state and background tasks of the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this Manager","type":[[["Client"]]],"meta":{"line":14,"file":"ClientManager.js","path":"src/client"}},{"name":"heartbeatInterval","description":"The heartbeat interval","nullable":true,"type":[[["number"]]],"meta":{"line":20,"file":"ClientManager.js","path":"src/client"}},{"name":"status","description":"The status of the client","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"ClientManager.js","path":"src/client"}}],"methods":[{"name":"connectToWebSocket","description":"Connects the client to the WebSocket.","params":[{"name":"token","description":"The authorization token","type":[[["string"]]]},{"name":"resolve","description":"Function to run when connection is successful","type":[[["function"]]]},{"name":"reject","description":"Function to run when connection fails","type":[[["function"]]]}],"meta":{"line":38,"file":"ClientManager.js","path":"src/client"}}],"meta":{"line":8,"file":"ClientManager.js","path":"src/client"}},{"name":"ClientVoiceManager","description":"Manages all the voice stuff for the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this voice manager","type":[[["Client"]]],"meta":{"line":16,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":22,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"joinChannel","description":"Sets up a request to join a voice channel.","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":49,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":10,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"BroadcastDispatcher","description":"The class that sends voice packet data to the voice connection.","extends":["StreamDispatcher"],"implements":["VolumeInterface"],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":42,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":57,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","type":[[["boolean"]]],"meta":{"line":125,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused","type":[[["number"]]],"meta":{"line":131,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","type":[[["number"]]],"meta":{"line":146,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","type":[[["number"]]],"meta":{"line":154,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","type":[[["boolean"]]],"meta":{"line":268,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","type":[[["boolean"]]],"meta":{"line":17,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":26,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":35,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":44,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"pause","description":"Pauses playback","inherits":"StreamDispatcher#pause","inherited":true,"meta":{"line":117,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","inherits":"StreamDispatcher#resume","inherited":true,"meta":{"line":136,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","inherits":"StreamDispatcher#setBitrate","inherited":true,"params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":164,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","inherits":"StreamDispatcher#setPLP","inherited":true,"params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":176,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","inherits":"StreamDispatcher#setFEC","inherited":true,"params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":187,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","inherits":"StreamDispatcher#setVolume","inherited":true,"implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":66,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","inherits":"StreamDispatcher#setVolumeDecibels","inherited":true,"implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":81,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","inherits":"StreamDispatcher#setVolumeLogarithmic","inherited":true,"implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":89,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":73,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":94,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":234,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":254,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":8,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\n```js\n// Obtained using:\nvoiceChannel.join().then(connection => {\n  // You can play a file or a stream here:\n  const dispatcher = connection.playFile('./file.mp3');\n});\n```","extends":["WritableStream"],"implements":["VolumeInterface"],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":42,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":57,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","type":[[["boolean"]]],"meta":{"line":125,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused","type":[[["number"]]],"meta":{"line":131,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","type":[[["number"]]],"meta":{"line":146,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","type":[[["number"]]],"meta":{"line":154,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","type":[[["boolean"]]],"meta":{"line":268,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","type":[[["boolean"]]],"meta":{"line":17,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":26,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":35,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":44,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"pause","description":"Pauses playback","meta":{"line":117,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","meta":{"line":136,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":164,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":176,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":187,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":66,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":81,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":89,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":73,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":94,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":234,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":254,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":31,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP client for a Voice Connection.","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":20,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":26,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordAddress","description":"The address of the Discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":38,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordPort","description":"The port of the Discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":65,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"methods":[{"name":"findEndpointAddress","description":"Tries to resolve the voice server endpoint to an address.","returns":[[["Promise","<"],["string",">"]]],"meta":{"line":73,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"send","description":"Send a packet to the UDP client.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":91,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"meta":{"line":12,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket.","extends":["EventEmitter"],"access":"private","props":[{"name":"client","description":"The client of this voice WebSocket","type":[[["Client"]]],"meta":{"line":19,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"voiceConnection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":25,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":31,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":71,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket.","meta":{"line":46,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":57,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"The data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":83,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":97,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onOpen","description":"Called whenever the WebSocket opens.","meta":{"line":109,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket.","params":[{"name":"event","description":"The message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":128,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket server is lost.","meta":{"line":139,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":147,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":155,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket.","params":[{"name":"interval","description":"The interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":202,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists.","meta":{"line":222,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet.","meta":{"line":234,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"events":[{"name":"ready","description":"Emitted once the voice WebSocket receives the ready packet.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":160,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session.","params":[{"name":"encryptionMode","description":"The type of encryption being used","type":[[["string"]]]},{"name":"secretKey","description":"The secret key used for encryption","type":[[["Uint8Array"]]]}],"meta":{"line":171,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"speaking","description":"Emitted whenever a speaking packet is received.","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":180,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received.","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":188,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"warn","description":"Emitted whenver the voice WebSocket encounters a non-fatal error.","params":[{"name":"warn","description":"The warning","type":[[["string"]]]}],"meta":{"line":208,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"meta":{"line":11,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"AudioPlayer","description":"An Audio Player for a Voice Connection.","extends":["BasePlayer"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that the player serves","type":[[["VoiceConnection"]]],"meta":{"line":15,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"broadcast","description":"The broadcast that the player serves","type":[[["VoiceBroadcast"]]],"meta":{"line":16,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":9,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}},{"name":"BasePlayer","description":"An Audio Player for a Voice Connection.","extends":["EventEmitter"],"access":"private","meta":{"line":19,"file":"BasePlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives audio packets from a voice connection.","methods":[{"name":"createStream","description":"Creates a new audio receiving stream. If a stream already exists for a user, then that stream will be returned\nrather than generating a new one.","params":[{"name":"user","description":"The user to start listening to.","type":[[["UserResolvable"]]]},{"name":"options","description":"Options.","type":[[["ReceiveStreamOptions"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":41,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"debug","description":"Emitted whenever there is a warning","params":[{"name":"error","description":"The error or message to debug","type":[[["Error"]],[["string"]]]}],"meta":{"line":17,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":12,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"DispatcherSet","description":"A \"store\" for handling broadcast dispatcher (un)subscription","access":"private","props":[{"name":"broadcast","description":"The broadcast that this set belongs to","type":[[["VoiceBroadcast"]]],"meta":{"line":14,"file":"DispatcherSet.js","path":"src/client/voice/util"}}],"meta":{"line":7,"file":"DispatcherSet.js","path":"src/client/voice/util"}},{"name":"PlayInterface","description":"An interface class to allow you to play audio over VoiceConnections and VoiceBroadcasts.","methods":[{"name":"play","description":"Play an audio resource.","examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":60,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"meta":{"line":35,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":["EventEmitter"],"props":[{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","type":[[["boolean"]]],"meta":{"line":17,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":26,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":35,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":44,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":66,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":81,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":89,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":67,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"meta":{"line":7,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"VoiceBroadcast","description":"A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n\nExample usage:\n```js\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.playFile('./music.mp3');\n// Play \"music.mp3\" in all voice connections that the client is in\nfor (const connection of client.voiceConnections.values()) {\n  connection.playBroadcast(broadcast);\n}\n```","implements":["VolumeInterface","PlayInterface"],"props":[{"name":"client","description":"The client that created the broadcast","type":[[["Client"]]],"meta":{"line":28,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current master dispatcher, if any. This dispatcher controls all that is played by subscribed dispatchers.","nullable":true,"type":[[["BroadcastDispatcher"]]],"meta":{"line":37,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"methods":[{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["BroadcastDispatcher"]]],"meta":{"line":61,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"events":[{"name":"subscribe","description":"Emitted whenever a stream dispatcher subscribes to the broadcast.","params":[{"name":"dispatcher","description":"The subscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":19,"file":"DispatcherSet.js","path":"src/client/voice/util"}},{"name":"unsubscribe","description":"Emitted whenever a stream dispatcher unsubscribes to the broadcast.","params":[{"name":"dispatcher","description":"The unsubscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":30,"file":"DispatcherSet.js","path":"src/client/voice/util"}}],"meta":{"line":21,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"VoiceConnection","description":"Represents a connection to a guild's voice server.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n\n  });\n```","extends":["EventEmitter"],"implements":["PlayInterface"],"props":[{"name":"voiceManager","description":"The voice manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":31,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"client","description":"The client that instantiated this connection","type":[[["Client"]]],"meta":{"line":37,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":43,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"status","description":"The current status of the voice connection","type":[[["VoiceStatus"]]],"meta":{"line":49,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Whether we're currently transmitting audio","type":[[["boolean"]]],"meta":{"line":55,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receivers","description":"An array of Voice Receivers that have been created for this connection","type":[[["Array","<"],["VoiceReceiver",">"]]],"meta":{"line":61,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["Object"]]],"meta":{"line":68,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":74,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC to speaking values","access":"private","type":[[["Map","<"],["number",", "],["boolean",">"]]],"meta":{"line":101,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["Object"]]],"meta":{"line":108,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current stream dispatcher (if any)","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":118,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\" or not.","access":"private","params":[{"name":"value","description":"Whether or not to speak","type":[[["boolean"]]]}],"meta":{"line":127,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel.","access":"private","params":[{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"meta":{"line":147,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the voice servers.","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":168,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection.","access":"private","params":[{"name":"sessionID","description":"The voice session ID","type":[[["string"]]]}],"meta":{"line":200,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"checkAuthenticated","description":"Checks whether the voice connection is authenticated.","access":"private","meta":{"line":224,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticateFailed","description":"Invoked when we fail to initiate a voice connection.","access":"private","params":[{"name":"reason","description":"The reason for failure","type":[[["string"]]]}],"meta":{"line":244,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"updateChannel","description":"Move to a different voice channel in the same guild.","access":"private","params":[{"name":"channel","description":"The channel to move to","type":[[["VoiceChannel"]]]}],"meta":{"line":264,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticate","description":"Attempts to authenticate to the voice server.","access":"private","meta":{"line":273,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnect","description":"Attempts to reconnect to the voice server (typically after a region change).","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"meta":{"line":285,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnects the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":301,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_disconnect","description":"Internally disconnects (doesn't send disconnect packet).","access":"private","meta":{"line":313,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"cleanup","description":"Cleans up after disconnect.","access":"private","meta":{"line":328,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection.","access":"private","meta":{"line":350,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onReady","description":"Invoked when the voice websocket is ready.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":376,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSessionDescription","description":"Invoked when a session description is received.","access":"private","params":[{"name":"mode","description":"The encryption mode","type":[[["string"]]]},{"name":"secret","description":"The secret key","type":[[["string"]]]}],"meta":{"line":398,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSpeaking","description":"Invoked when a speaking event is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":416,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"createReceiver","description":"Creates a VoiceReceiver so you can start listening to voice data.\nIt's recommended to only create one of these.","returns":[[["VoiceReceiver"]]],"meta":{"line":435,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":60,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"debug","description":"Debug info from the connection.","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":77,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection.","params":[{"name":"warning","description":"The warning","type":[[["string"]],[["Error"]]]}],"meta":{"line":86,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"newSession","description":"Emitted when a new session ID is received.","meta":{"line":211,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticated","description":"Emitted when we successfully initiate a voice connection.","meta":{"line":230,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"failed","description":"Emitted when we fail to initiate a voice connection.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":247,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnecting","description":"Emitted when the voice connection is reconnecting (typically after a region change).","meta":{"line":290,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects.","meta":{"line":316,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":381,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\nthe connection will already be ready.","meta":{"line":403,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user starts/stops speaking.","params":[{"name":"user","description":"The user that has started/stopped speaking","type":[[["User"]]]},{"name":"speaking","description":"Whether or not the user is speaking","type":[[["boolean"]]]}],"meta":{"line":420,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":23,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":["BaseClient"],"implements":["Webhook"],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"token","description":"The token for the webhook","type":[[["string"]]],"meta":{"line":30,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":42,"file":"Webhook.js","path":"src/structures"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":18,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":25,"file":"BaseClient.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":32,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":39,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":48,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","inherits":"BaseClient#destroy","inherited":true,"meta":{"line":55,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":69,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":82,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":104,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":9,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketConnection","description":"Abstracts a WebSocket connection with decoding/encoding for the Discord gateway.","access":"private","construct":{"name":"WebSocketConnection","params":[{"name":"manager","description":"The WebSocket manager","type":[[["WebSocketManager"]]]},{"name":"gateway","description":"The WebSocket gateway to connect to","type":[[["string"]]]}]},"props":[{"name":"manager","description":"The WebSocket Manager of this connection","type":[[["WebSocketManager"]]],"meta":{"line":27,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"client","description":"The client this belongs to","type":[[["Client"]]],"meta":{"line":33,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ws","description":"The WebSocket connection itself","type":[[["WebSocket"]]],"meta":{"line":39,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"sequence","description":"The current sequence of the WebSocket","type":[[["number"]]],"meta":{"line":45,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of the client","type":[[["number"]]],"meta":{"line":51,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"packetManager","description":"The Packet Manager of the connection","type":[[["WebSocketPacketManager"]]],"meta":{"line":57,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"lastPingTimestamp","description":"The last time a ping was sent (a timestamp)","type":[[["number"]]],"meta":{"line":63,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ratelimit","description":"Contains the rate limit queue and metadata","type":[[["Object"]]],"meta":{"line":69,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"disabledEvents","description":"Events that are disabled (will not be processed)","type":[[["Object"]]],"meta":{"line":81,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"closeSequence","description":"The sequence on WebSocket close","type":[[["number"]]],"meta":{"line":88,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"expectingClose","description":"Whether or not the WebSocket is expecting to be closed","type":[[["boolean"]]],"meta":{"line":94,"file":"WebSocketConnection.js","path":"src/client/websocket"}}],"methods":[{"name":"triggerReady","description":"Causes the client to be marked as ready and emits the ready event.","returns":[[["void"]]],"meta":{"line":104,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"checkIfReady","description":"Checks whether the client is ready to be marked as ready.","returns":[[["void"]]],"meta":{"line":122,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"debug","description":"Emits a debug message.","params":[{"name":"message","description":"Debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":149,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"processQueue","description":"Processes the current WebSocket queue.","meta":{"line":157,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"_send","description":"Sends data, bypassing the queue.","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":179,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"send","description":"Adds data to the queue to be sent.","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":192,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"connect","description":"Creates a connection to a gateway.","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]},{"name":"after","description":"How long to wait before connecting","optional":true,"default":0,"type":[[["number"]]]},{"name":"force","description":"Whether or not to force a new connection even if one already exists","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":208,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys the connection.","returns":[[["boolean"]]],"meta":{"line":241,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onMessage","description":"Called whenever a message is received.","params":[{"name":"event","description":"Event received","type":[[["Event"]]]}],"meta":{"line":261,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"setSequence","description":"Sets the current sequence of the connection.","params":[{"name":"s","description":"New sequence","type":[[["number"]]]}],"meta":{"line":287,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onPacket","description":"Called whenever a packet is received.","params":[{"name":"packet","description":"Received packet","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":296,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onOpen","description":"Called whenever a connection is opened to the gateway.","params":[{"name":"event","description":"Received open event","type":[[["Event"]]]}],"meta":{"line":324,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"reconnect","description":"Causes a reconnection to the gateway.","meta":{"line":333,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":347,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onClose","description":"Called whenever a connection to the gateway is closed.","params":[{"name":"event","description":"Close event that was received","type":[[["CloseEvent"]]]}],"meta":{"line":369,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ackHeartbeat","description":"Acknowledges a heartbeat.","meta":{"line":396,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"heartbeat","description":"Sends a heartbeat or sets an interval for sending heartbeats.","params":[{"name":"time","description":"If -1, clears the interval, any other number sets an interval\nIf no value is given, a heartbeat will be sent instantly","optional":true,"type":[[["number"]]]}],"meta":{"line":406,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identify","description":"Identifies the client on a connection.","params":[{"name":"after","description":"How long to wait before identifying","optional":true,"type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":432,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identifyNew","description":"Identifies as a new connection on the gateway.","returns":[[["void"]]],"meta":{"line":441,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identifyResume","description":"Resumes a session on the gateway.","returns":[[["void"]]],"meta":{"line":462,"file":"WebSocketConnection.js","path":"src/client/websocket"}}],"meta":{"line":16,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"WebSocketManager","description":"WebSocket Manager of the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this WebSocketManager","type":[[["Client"]]],"meta":{"line":16,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connection","description":"The WebSocket connection of this manager","nullable":true,"type":[[["WebSocketConnection"]]],"meta":{"line":22,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"heartbeat","description":"Sends a heartbeat on the available connection.","returns":[[["void"]]],"meta":{"line":29,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"debug","description":"Emits a debug event.","params":[{"name":"message","description":"Debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":39,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroy the client.","returns":{"types":[[["void"]]],"description":"Whether or not destruction was successful"},"meta":{"line":47,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"send","description":"Send a packet on the available WebSocket.","params":[{"name":"packet","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":60,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects the client to a gateway.","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":73,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":9,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"DiscordAPIError","description":"Represents an error from the Discord API.","extends":["Error"],"props":[{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":16,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":22,"file":"DiscordAPIError.js","path":"src/rest"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"DiscordAPIError.js","path":"src/rest"}}],"meta":{"line":5,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"Shard","description":"A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process exits for any reason, the shard will spawn a\nnew one to replace it as necessary.","extends":["EventEmitter"],"construct":{"name":"Shard","params":[{"name":"manager","description":"Manager that is spawning this shard","type":[[["ShardingManager"]]]},{"name":"id","description":"ID of this shard","type":[[["number"]]]},{"name":"args","description":"Command line arguments to pass to the script","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":26,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard","type":[[["number"]]],"meta":{"line":32,"file":"Shard.js","path":"src/sharding"}},{"name":"args","description":"Arguments for the shard's process","type":[[["Array","<"],["string",">"]]],"meta":{"line":38,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"Environment variables for the shard's process","type":[[["Object"]]],"meta":{"line":44,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":55,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":61,"file":"Shard.js","path":"src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":68,"file":"Shard.js","path":"src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":75,"file":"Shard.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":82,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process for the shard.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"waitForReady","description":"Whether to wait until the {@link Client} has become ready before resolving","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":91,"file":"Shard.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process.","params":[{"name":"delay","description":"How long to wait between killing the process and restarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"waitForReady","description":"Whether to wait the {@link Client} has become ready before resolving","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":121,"file":"Shard.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the shard's process.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":134,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","examples":["shard.fetchClientValue('guilds.size')\n  .then(count => {\n    console.log(`${count} guilds in shard ${shard.id}`);\n  })\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":154,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the shard, in the context of the {@link Client}.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":182,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":211,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":287,"file":"Shard.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process.","params":[{"name":"process","description":"Child process that was created","type":[[["ChildProcess"]]]}],"meta":{"line":98,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#ready} event.","meta":{"line":216,"file":"Shard.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link Client#disconnect} event.","meta":{"line":227,"file":"Shard.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the shard's {@link Client#reconnecting} event.","meta":{"line":238,"file":"Shard.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon recieving a message from the child process.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":274,"file":"Shard.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process exiting.","params":[{"name":"process","description":"Child process that exited","type":[[["ChildProcess"]]]}],"meta":{"line":288,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":13,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process, such as from a {@link ShardingManager}.\nUtilises IPC to send and receive data to/from the master process and other shards.","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]}]},"props":[{"name":"id","description":"ID of this shard","readonly":true,"type":[[["number"]]],"meta":{"line":26,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":35,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":44,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","see":["{@link ShardingManager#fetchClientValues}"],"examples":["client.shard.fetchClientValues('guilds.size')\n  .then(results => {\n    console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n  })\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":65,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the {@link Clients}.","see":["{@link ShardingManager#broadcastEval}"],"params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":87,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ShardingManager#respawnAll}"],"params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"waitForReady","description":"Whether to wait for a shard to become ready before continuing to another","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"},"meta":{"line":113,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":122,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":144,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]}],"returns":[[["ShardClientUtil"]]],"meta":{"line":156,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":9,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} for each individual shard, each containing its own\ninstance of your bot's {@link Client}. They all have a line of communication with the master process, and there are\nseveral useful methods that utilise it in order to simplify tasks that are normally difficult with sharding. It can\nspawn a specific number of shards or the amount that Discord suggests for the bot, and takes a path to your main bot\nscript to launch for each one.","extends":["EventEmitter"],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of shards to spawn, or \"auto\"","optional":true,"default":"'auto'","type":[[["number"]],[["string"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":40,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that this manager is going to spawn","type":[[["number"]],[["string"]]],"meta":{"line":50,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":65,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards","type":[[["Array","<"],["string",">"]]],"meta":{"line":71,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":77,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":83,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"ID of the shard to spawn -\n**This is usually not necessary to manually specify.**","optional":true,"default":"this.shards.size","type":[[["number"]]]}],"returns":[[["Shard"]]],"meta":{"line":92,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"waitForReady","description":"Whether to wait for a shard to become ready before continuing to another","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":111,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":146,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the {@link Client}s.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":157,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["manager.fetchClientValues('guilds.size')\n  .then(results => {\n    console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n  })\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":174,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"waitForReady","description":"Whether to wait for a shard to become ready before continuing to another","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Shard",">>"]]],"meta":{"line":190,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a shard.","params":[{"name":"shard","description":"Shard that was created","type":[[["Shard"]]]}],"meta":{"line":95,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":18,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"ChannelStore","description":"Stores channels.","extends":["DataStore"],"methods":[{"name":"resolve","description":"Resolves a ChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":82,"file":"ChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a ChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":91,"file":"ChannelStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"ChannelStore.js","path":"src/stores"}},{"name":"ClientPresenceStore","description":"Stores the client presence and other presences.","extends":["PresenceStore"],"methods":[{"name":"resolve","description":"Resolves a PresenceResolvable to a Presence object.","inherits":"PresenceStore#resolve","inherited":true,"params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Presence"]]],"nullable":true},"meta":{"line":31,"file":"PresenceStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a PresenceResolvable to a Presence ID string.","inherits":"PresenceStore#resolveID","inherited":true,"params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":43,"file":"PresenceStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"ClientPresenceStore.js","path":"src/stores"}},{"name":"DataStore","description":"Manages the creation, retrieval and deletion of a specific data model.","extends":["Collection"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":33,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":44,"file":"DataStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":8,"file":"DataStore.js","path":"src/stores"}},{"name":"GuildChannelStore","description":"Stores guild channels.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"create","description":"Creates a new channel in the guild.","examples":["// Create a new text channel\nguild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.type","description":"The type of the new channel, either `text`, `voice`, or `category`","optional":true,"default":"'text'","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw","optional":true,"type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<("],["PermissionOverwrites","|"],["ChannelCreationOverwrites",")>"]]]},{"name":"options.reason","description":"Reason for creating the channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":51,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a GuildChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":99,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":108,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":12,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"GuildEmojiStore","description":"Stores guild emojis.","extends":["DataStore"],"methods":[{"name":"create","description":"Creates a new custom emoji in the guild.","examples":["// Create a new emoji from a url\nguild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\nguild.emojis.create('./memes/banana.png', 'banana')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.roles","description":"Roles to limit the emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.reason","description":"Reason for creating the emoji","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"},"meta":{"line":40,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves an EmojiResolvable to an Emoji object.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["GuildEmoji"]]],"nullable":true},"meta":{"line":75,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves an EmojiResolvable to an Emoji ID string.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":85,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveIdentifier","description":"Resolves an EmojiResolvable to an emoji identifier.","params":[{"name":"emoji","description":"The emoji resolvable to resolve","type":[[["EmojiIdentifierResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":102,"file":"GuildEmojiStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberStore","description":"Stores guild members.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"resolve","description":"Resolves a GuildMemberResolvable to a GuildMember object.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":33,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildMemberResolvable to an member ID string.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":46,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"fetch","description":"Fetches member(s) from Discord, even if they're offline.","examples":["// Fetch all members from a guild\nguild.members.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member\nguild.members.fetch('66564597481480192')\n  .then(console.log)\n  .catch(console.error);\nguild.members.fetch({ user, cache: false }) // Fetch and don't cache\n  .then(console.log)\n  .catch(console.error);","// Fetch by query\nguild.members.fetch({ query: 'hydra' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"If a UserResolvable, the user to fetch.\nIf undefined, fetches all members.\nIf a query, it limits the results to users with similar usernames.","optional":true,"type":[[["UserResolvable"]],[["FetchMemberOptions"]],[["FetchMembersOptions"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]],"meta":{"line":92,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"prune","description":"Prunes members from the guild based on how long they have been inactive.","examples":["// See how many members will be pruned\nguild.members.prune({ dry: true })\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.members.prune({ days: 1, reason: 'too many people!' })\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Prune options","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of inactivity required to kick","optional":true,"default":7,"type":[[["number"]]]},{"name":"options.dry","description":"Get number of users that will be kicked, without actually kicking them","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":121,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// Ban a user by ID (or with a user/guild member object)\nguild.members.ban('84484653687267328')\n  .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["GuildMember","|"],["User","|"],["Snowflake",")>"]]],"description":"Result object will be resolved as specifically as possible.\nIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\nbe resolved, the user ID will be the result."},"meta":{"line":142,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"unban","description":"Unbans a user from the guild.","examples":["// Unban a user by ID (or with a user/guild member object)\nguild.members.unban('84484653687267328')\n  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":169,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":11,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildStore","description":"Stores guilds.","extends":["DataStore"],"methods":[{"name":"resolve","description":"Resolves a GuildResolvable to a Guild object.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":22,"file":"GuildStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildResolvable to a Guild ID string.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":31,"file":"GuildStore.js","path":"src/stores"}},{"name":"create","description":"Creates a guild.\n<warn>This is only available when using a user account.</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"options","description":"Options for the creating","optional":true,"type":[[["Object"]]]},{"name":"options.region","description":"The region for the server, defaults to the closest one available","optional":true,"type":[[["string"]]]},{"name":"options.icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":49,"file":"GuildStore.js","path":"src/stores"}}],"meta":{"line":10,"file":"GuildStore.js","path":"src/stores"}},{"name":"MessageStore","description":"Stores messages for text-based channels.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"fetch","description":"Gets a message, or messages, from this channel.","examples":["// Get message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Get messages\nchannel.messages.fetch({limit: 10})\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The ID of the message to fetch, or query parameters.","optional":true,"type":[[["Snowflake"]],[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":52,"file":"MessageStore.js","path":"src/stores"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain the reactions of the messages.\nThose need to be fetched seperately.</info>","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":62,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a MessageResolvable to a Message object.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Message"]]],"nullable":true},"meta":{"line":100,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageResolvable to a Message ID string.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":109,"file":"MessageStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":10,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceStore","description":"Stores presences.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"resolve","description":"Resolves a PresenceResolvable to a Presence object.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Presence"]]],"nullable":true},"meta":{"line":31,"file":"PresenceStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a PresenceResolvable to a Presence ID string.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":43,"file":"PresenceStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":8,"file":"PresenceStore.js","path":"src/stores"}},{"name":"ReactionStore","description":"Stores reactions.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"resolve","description":"Resolves a MessageReactionResolvable to a MessageReaction object.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["MessageReaction"]]],"nullable":true},"meta":{"line":25,"file":"ReactionStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageReactionResolvable to a MessageReaction ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":34,"file":"ReactionStore.js","path":"src/stores"}},{"name":"removeAll","description":"Removes all reactions from a message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":47,"file":"ReactionStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":8,"file":"ReactionStore.js","path":"src/stores"}},{"name":"ReactionUserStore","description":"A data store to store User models who reacted to a MessageReaction.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"fetch","description":"Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","params":[{"name":"options","description":"Options for fetching the users","optional":true,"type":[[["Object"]]]},{"name":"options.limit","description":"The maximum amount of users to fetch, defaults to 100","optional":true,"default":100,"type":[[["number"]]]},{"name":"options.before","description":"Limit fetching users to those with an id lower than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["ReactionUserStore","<"],["Snowflake",", "],["User",">>"]]],"meta":{"line":20,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a user from this reaction.","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.reaction.message.client.user","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":37,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","inherits":"DataStore#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":33,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","inherits":"DataStore#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":44,"file":"DataStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":6,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"RoleStore","description":"Stores roles.","extends":["DataStore"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"create","description":"Creates a new role in the guild with given information.\n<warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>","examples":["// Create a new role\nguild.roles.create()\n  .then(console.log)\n  .catch(console.error);","// Create a new role with data and a reason\nguild.roles.create({\n    name: 'Super Cool People',\n    color: 'BLUE'\n  },\n  reason: 'we needed a role for Super Cool People',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the role with","optional":true,"type":[[["RoleData"]]]},{"name":"reason","description":"Reason for creating this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":42,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a RoleResolvable to a Role object.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Role"]]],"nullable":true},"meta":{"line":63,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a RoleResolvable to a role ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":72,"file":"RoleStore.js","path":"src/stores"}},{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","inherits":"Collection#array","inherited":true,"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","inherits":"Collection#keyArray","inherited":true,"returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","inherits":"Collection#first","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","inherits":"Collection#firstKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#last","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#lastKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#random","inherited":true,"params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","inherits":"Collection#randomKey","inherited":true,"params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","inherits":"Collection#findAll","inherited":true,"examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","inherits":"Collection#find","inherited":true,"examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","inherits":"Collection#findKey","inherited":true,"examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","inherits":"Collection#exists","inherited":true,"examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","inherits":"Collection#filter","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","inherits":"Collection#filterArray","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","inherits":"Collection#map","inherited":true,"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","inherits":"Collection#some","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","inherits":"Collection#every","inherited":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","inherits":"Collection#reduce","inherited":true,"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","inherits":"Collection#clone","inherited":true,"examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","inherits":"Collection#concat","inherited":true,"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","inherits":"Collection#deleteAll","inherited":true,"returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","inherits":"Collection#equals","inherited":true,"params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","inherits":"Collection#sort","inherited":true,"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":10,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserStore","description":"A data store to store User models.","extends":["DataStore"],"methods":[{"name":"resolve","description":"Resolves a UserResolvable to a User object.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":29,"file":"UserStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a UserResolvable to a user ID string.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":40,"file":"UserStore.js","path":"src/stores"}},{"name":"fetch","description":"Obtains a user from Discord, or the user cache if it's already available.\n<warn>This is only available when using a bot account.</warn>","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new user object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":53,"file":"UserStore.js","path":"src/stores"}}],"meta":{"line":10,"file":"UserStore.js","path":"src/stores"}},{"name":"Base","description":"Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).","props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"meta":{"line":4,"file":"Base.js","path":"src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":["GuildChannel"],"props":[{"name":"children","description":"Channels that are part of this category","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":13,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":23,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":39,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":45,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":51,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":64,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":89,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":266,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":492,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":516,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\none of `EVERYTHING`, `MENTIONS`, `NOTHING`, `INHERIT`\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setParent","description":"Sets the category parent of this channel.\n<warn>It is not currently possible to set the parent of a CategoryChannel.</warn>","params":[{"name":"channel","description":"Parent channel","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":17,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Permissions"]]],"meta":{"line":139,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Permissions"]]],"meta":{"line":165,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(() => console.log('Done!'))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":250,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":310,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":351,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":381,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":398,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":426,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Optional name for the new channel, otherwise it has the name\nof this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.withPermissions","description":"Whether to clone the channel with this channel's\npermission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.parent","description":"The parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":448,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":468,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then() // Success\n  .catch(console.error); // Log error"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":506,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":62,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":7,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"Channel","description":"Represents any channel on Discord.","extends":["Base"],"props":[{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":62,"file":"Channel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":75,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"Channel.js","path":"src/structures"}},{"name":"ClientApplication","description":"Represents a Client OAuth2 Application.","extends":["Base"],"props":[{"name":"id","description":"The ID of the app","type":[[["Snowflake"]]],"meta":{"line":21,"file":"ClientApplication.js","path":"src/structures"}},{"name":"name","description":"The name of the app","type":[[["string"]]],"meta":{"line":27,"file":"ClientApplication.js","path":"src/structures"}},{"name":"description","description":"The app's description","type":[[["string"]]],"meta":{"line":33,"file":"ClientApplication.js","path":"src/structures"}},{"name":"icon","description":"The app's icon hash","type":[[["string"]]],"meta":{"line":39,"file":"ClientApplication.js","path":"src/structures"}},{"name":"cover","description":"The app's cover image hash","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"ClientApplication.js","path":"src/structures"}},{"name":"rpcOrigins","description":"The app's RPC origins","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"ClientApplication.js","path":"src/structures"}},{"name":"redirectURIs","description":"The app's redirect URIs","type":[[["Array","<"],["string",">"]]],"meta":{"line":57,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botRequireCodeGrant","description":"If this app's bot requires a code grant when using the OAuth2 flow","type":[[["boolean"]]],"meta":{"line":63,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botPublic","description":"If this app's bot is public","type":[[["boolean"]]],"meta":{"line":69,"file":"ClientApplication.js","path":"src/structures"}},{"name":"rpcApplicationState","description":"If this app can use rpc","type":[[["boolean"]]],"meta":{"line":75,"file":"ClientApplication.js","path":"src/structures"}},{"name":"bot","description":"Object containing basic info about this app's bot","type":[[["Object"]]],"meta":{"line":81,"file":"ClientApplication.js","path":"src/structures"}},{"name":"flags","description":"The flags for the app","type":[[["number"]]],"meta":{"line":87,"file":"ClientApplication.js","path":"src/structures"}},{"name":"secret","description":"OAuth2 secret for the application","type":[[["string"]]],"meta":{"line":93,"file":"ClientApplication.js","path":"src/structures"}},{"name":"owner","description":"The owner of this OAuth application","nullable":true,"type":[[["User"]]],"meta":{"line":100,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the app was created at","readonly":true,"type":[[["number"]]],"meta":{"line":109,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdAt","description":"The time the app was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":118,"file":"ClientApplication.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","params":[{"name":"options","description":"Options for the icon url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":129,"file":"ClientApplication.js","path":"src/structures"}},{"name":"coverImage","description":"A link to this application's cover image.","params":[{"name":"options","description":"Options for the cover image url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the cover image","nullable":true},"meta":{"line":141,"file":"ClientApplication.js","path":"src/structures"}},{"name":"fetchAssets","description":"Get rich presence assets.","returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":152,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createAsset","description":"Creates a rich presence asset.","params":[{"name":"name","description":"Name of the asset","type":[[["string"]]]},{"name":"data","description":"Data of the asset","type":[[["Base64Resolvable"]]]},{"name":"type","description":"Type of the asset. `big`, or `small`","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":169,"file":"ClientApplication.js","path":"src/structures"}},{"name":"resetSecret","description":"Resets the app's secret.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":183,"file":"ClientApplication.js","path":"src/structures"}},{"name":"resetToken","description":"Resets the app's bot token.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":193,"file":"ClientApplication.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nClientApplication object.","examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[[["string"]]],"meta":{"line":206,"file":"ClientApplication.js","path":"src/structures"}}],"meta":{"line":10,"file":"ClientApplication.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":["User"],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":21,"file":"ClientUser.js","path":"src/structures"}},{"name":"email","description":"The email of this account","type":[[["string"]]],"meta":{"line":27,"file":"ClientUser.js","path":"src/structures"}},{"name":"friends","description":"A Collection of friends for the logged in user\n<warn>This is only filled when using a user account.</warn>","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":35,"file":"ClientUser.js","path":"src/structures"}},{"name":"blocked","description":"A Collection of blocked users for the logged in user\n<warn>This is only filled when using a user account.</warn>","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":42,"file":"ClientUser.js","path":"src/structures"}},{"name":"notes","description":"A Collection of notes for the logged in user\n<warn>This is only filled when using a user account.</warn>","type":[[["Collection","<"],["Snowflake",", "],["string",">"]]],"meta":{"line":49,"file":"ClientUser.js","path":"src/structures"}},{"name":"premium","description":"If the user has Discord premium (nitro)\n<warn>This is only filled when using a user account.</warn>","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"ClientUser.js","path":"src/structures"}},{"name":"mfaEnabled","description":"If the user has MFA enabled on their account\n<warn>This is only filled when using a user account.</warn>","nullable":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"ClientUser.js","path":"src/structures"}},{"name":"mobile","description":"If the user has ever used a mobile device on Discord\n<warn>This is only filled when using a user account.</warn>","nullable":true,"type":[[["boolean"]]],"meta":{"line":70,"file":"ClientUser.js","path":"src/structures"}},{"name":"settings","description":"Various settings for this user\n<warn>This is only filled when using a user account.</warn>","nullable":true,"type":[[["ClientUserSettings"]]],"meta":{"line":77,"file":"ClientUser.js","path":"src/structures"}},{"name":"guildSettings","description":"All of the user's guild settings\n<warn>This is only filled when using a user account.</warn>","type":[[["Collection","<"],["Snowflake",", "],["ClientUserGuildSettings",">"]]],"meta":{"line":84,"file":"ClientUser.js","path":"src/structures"}},{"name":"presence","description":"ClientUser's presence","readonly":true,"type":[[["Presence"]]],"meta":{"line":99,"file":"ClientUser.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":23,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":34,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":59,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":65,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":117,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0086`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":139,"file":"User.js","path":"src/structures"}},{"name":"note","description":"The note that is set for the user\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":149,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":188,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Sets the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","examples":["// Set username\nclient.user.setUsername('iilukas')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]},{"name":"password","description":"Current password (only for user accounts)","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":132,"file":"ClientUser.js","path":"src/structures"}},{"name":"setEmail","description":"Changes the email for the client user's account.\n<warn>This is only available when using a user account.</warn>","examples":["// Set email\nclient.user.setEmail('bob@gmail.com', 'some amazing password 123')\n  .then(user => console.log(`My new email is ${user.email}`))\n  .catch(console.error);"],"params":[{"name":"email","description":"New email to change to","type":[[["string"]]]},{"name":"password","description":"Current password","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":148,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPassword","description":"Changes the password for the client user's account.\n<warn>This is only available when using a user account.</warn>","examples":["// Set password\nclient.user.setPassword('some new amazing password 456', 'some amazing password 123')\n  .then(user => console.log('New password set!'))\n  .catch(console.error);"],"params":[{"name":"newPassword","description":"New password to change to","type":[[["string"]]]},{"name":"options","description":"Object containing an MFA code, password or both.\nCan be just a string for the password.","type":[[["Object"]],[["string"]]]},{"name":"options.oldPassword","description":"Current password","optional":true,"type":[[["string"]]]},{"name":"options.mfaCode","description":"Timed MFA Code","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":167,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Sets the avatar of the logged in client.","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":181,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":203,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatus"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":221,"file":"ClientUser.js","path":"src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","params":[{"name":"name","description":"Activity being played","nullable":true,"type":[[["string"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["Object"]]]},{"name":"options.url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"options.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":233,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","params":[{"name":"afk","description":"Whether or not the user is AFK","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":245,"file":"ClientUser.js","path":"src/structures"}},{"name":"fetchMentions","description":"Fetches messages that mentioned the client's user.\n<warn>This is only available when using a user account.</warn>","params":[{"name":"options","description":"Options for the fetch","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.limit","description":"Maximum number of mentions to retrieve","optional":true,"default":25,"type":[[["number"]]]},{"name":"options.roles","description":"Whether to include role mentions","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.everyone","description":"Whether to include everyone/here mentions","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.guild","description":"Limit the search to a specific guild","optional":true,"type":[[["Guild"]],[["Snowflake"]]]}],"returns":[[["Promise","<"],["Array","<"],["Message",">>"]]],"meta":{"line":259,"file":"ClientUser.js","path":"src/structures"}},{"name":"createGroupDM","description":"Creates a Group DM.","params":[{"name":"recipients","description":"The recipients","type":[[["Array","<"],["GroupDMRecipientOptions",">"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":283,"file":"ClientUser.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar.","inherits":"User#avatarURL","inherited":true,"params":[{"name":"options","description":"Options for the avatar url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":107,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","inherits":"User#displayAvatarURL","inherited":true,"params":[{"name":"options","description":"Options for the avatar url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":130,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":168,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":178,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","inherits":"User#createDM","inherited":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":196,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","inherits":"User#deleteDM","inherited":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":208,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Gets the profile of the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#fetchProfile","inherited":true,"returns":[[["Promise","<"],["UserProfile",">"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"setNote","description":"Sets a note for the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#setNote","inherited":true,"params":[{"name":"note","description":"The note to set for the user","type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":229,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":240,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":257,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"User#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":13,"file":"ClientUser.js","path":"src/structures"}},{"name":"ClientUserChannelOverride","description":"A wrapper around the ClientUser's channel overrides.","props":[{"name":"muted","description":"Whether the channel is muted or not","type":[[["boolean"]]],"meta":{"line":557,"file":"Constants.js","path":"src/util"}},{"name":"messageNotifications","description":"The type of message that should notify you.\nOne of `EVERYTHING`, `MENTIONS`, `NOTHING`, `INHERIT`","type":[[["string"]]],"meta":{"line":549,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"meta":{"line":16,"file":"ClientUserChannelOverride.js","path":"src/structures"}}],"meta":{"line":6,"file":"ClientUserChannelOverride.js","path":"src/structures"}},{"name":"ClientUserGuildSettings","description":"A wrapper around the ClientUser's guild settings.","props":[{"name":"client","description":"The client that created the instance of the ClientUserGuildSettings","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"guildID","description":"The ID of the guild these settings are for","type":[[["Snowflake"]]],"meta":{"line":21,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"mobilePush","description":"Whether to receive mobile push notifications","type":[[["boolean"]]],"meta":{"line":521,"file":"Constants.js","path":"src/util"}},{"name":"messageNotifications","description":"The type of message that should notify you.\nOne of `EVERYTHING`, `MENTIONS`, `NOTHING`","type":[[["string"]]],"meta":{"line":513,"file":"Constants.js","path":"src/util"}},{"name":"muted","description":"Whether the guild is muted or not","type":[[["boolean"]]],"meta":{"line":527,"file":"Constants.js","path":"src/util"}},{"name":"suppressEveryone","description":"Whether to suppress everyone messages","type":[[["boolean"]]],"meta":{"line":533,"file":"Constants.js","path":"src/util"}},{"name":"channelOverrides","description":"A collection containing all the channel overrides","type":[[["Collection","<"],["ClientUserChannelOverride",">"]]],"meta":{"line":539,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"meta":{"line":31,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"update","description":"Update a specific property of the guild settings.","access":"private","params":[{"name":"name","description":"Name of property","type":[[["string"]]]},{"name":"value","description":"Value to patch","type":[["*"]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":55,"file":"ClientUserGuildSettings.js","path":"src/structures"}}],"meta":{"line":8,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"ClientUserSettings","description":"A wrapper around the ClientUser's settings.","props":[{"name":"convertEmoticons","description":"Automatically convert emoticons in your messages to emoji,\nfor example when you type `:-)` Discord will convert it to 😃","type":[[["boolean"]]],"meta":{"line":379,"file":"Constants.js","path":"src/util"}},{"name":"defaultGuildsRestricted","description":"If new guilds should automatically disable DMs between you and its members","type":[[["boolean"]]],"meta":{"line":387,"file":"Constants.js","path":"src/util"}},{"name":"detectPlatformAccounts","description":"Automatically detect accounts from services like Steam and Blizzard when you open the Discord client","type":[[["boolean"]]],"meta":{"line":394,"file":"Constants.js","path":"src/util"}},{"name":"developerMode","description":"Developer Mode exposes context menu items helpful for people writing bots using the Discord API","type":[[["boolean"]]],"meta":{"line":401,"file":"Constants.js","path":"src/util"}},{"name":"enableTTSCommand","description":"Allow playback and usage of the `/tts` command","type":[[["boolean"]]],"meta":{"line":408,"file":"Constants.js","path":"src/util"}},{"name":"theme","description":"The theme of the client. Either `light` or `dark`","type":[[["string"]]],"meta":{"line":415,"file":"Constants.js","path":"src/util"}},{"name":"status","description":"Last status set in the client","type":[[["PresenceStatus"]]],"meta":{"line":422,"file":"Constants.js","path":"src/util"}},{"name":"showCurrentGame","description":"Display currently running game as status message","type":[[["boolean"]]],"meta":{"line":429,"file":"Constants.js","path":"src/util"}},{"name":"inlineAttachmentMedia","description":"Display images, videos, and lolcats when uploaded directly to Discord","type":[[["boolean"]]],"meta":{"line":436,"file":"Constants.js","path":"src/util"}},{"name":"inlineEmbedMedia","description":"Display images, videos, and lolcats when posted as links in chat","type":[[["boolean"]]],"meta":{"line":443,"file":"Constants.js","path":"src/util"}},{"name":"locale","description":"Language the Discord client will use, as an RFC 3066 language identifier","type":[[["string"]]],"meta":{"line":450,"file":"Constants.js","path":"src/util"}},{"name":"messageDisplayCompact","description":"Display messages in compact mode","type":[[["boolean"]]],"meta":{"line":457,"file":"Constants.js","path":"src/util"}},{"name":"renderReactions","description":"Show emoji reactions on messages","type":[[["boolean"]]],"meta":{"line":464,"file":"Constants.js","path":"src/util"}},{"name":"guildPositions","description":"Array of snowflake IDs for guilds, in the order they appear in the Discord client","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":471,"file":"Constants.js","path":"src/util"}},{"name":"restrictedGuilds","description":"Array of snowflake IDs for guilds which you will not recieve DMs from","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":478,"file":"Constants.js","path":"src/util"}},{"name":"explicitContentFilter","description":"Safe direct messaging; force people's messages with images to be scanned before they are sent to you.\nOne of `DISABLED`, `NON_FRIENDS`, `FRIENDS_AND_NON_FRIENDS`","type":[[["string"]]],"meta":{"line":486,"file":"Constants.js","path":"src/util"}},{"name":"friendSources","description":"Who can add you as a friend","type":[[["Object"]]],"props":[{"name":"all","description":"Mutual friends and mutual guilds","type":[[["boolean"]]]},{"name":"mutualGuilds","description":"Only mutual guilds","type":[[["boolean"]]]},{"name":"mutualFriends","description":"Only mutual friends","type":[[["boolean"]]]}],"meta":{"line":495,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"meta":{"line":19,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"update","description":"Update a specific property of of user settings.","access":"private","params":[{"name":"name","description":"Name of property","type":[[["string"]]]},{"name":"value","description":"Value to patch","type":[["*"]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":37,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"setGuildPosition","description":"Sets the position of the guild in the guild listing.","params":[{"name":"guild","description":"The guild to move","type":[[["Guild"]]]},{"name":"position","description":"Absolute or relative position","type":[[["number"]]]},{"name":"relative","description":"Whether to position relatively or absolutely","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":48,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"addRestrictedGuild","description":"Adds a guild to the list of restricted guilds.","params":[{"name":"guild","description":"The guild to add","type":[[["Guild"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":59,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"removeRestrictedGuild","description":"Removes a guild from the list of restricted guilds.","params":[{"name":"guild","description":"The guild to remove","type":[[["Guild"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":71,"file":"ClientUserSettings.js","path":"src/structures"}}],"meta":{"line":8,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":24,"file":"DMChannel.js","path":"src/structures"}},{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":177,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":186,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the recipient's mention instead of the\nDMChannel object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":37,"file":"DMChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'swiftly.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.results[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.total}`);\n}).catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":101,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":116,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":160,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":203,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":227,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":290,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":75,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":10,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.","extends":["Base"],"props":[{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":14,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":20,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":26,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":61,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":7,"file":"Emoji.js","path":"src/structures"}},{"name":"GroupDMChannel","description":"Represents a Group DM on Discord.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"name","description":"The name of this Group DM, can be null if one isn't set","type":[[["string"]]],"meta":{"line":48,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"icon","description":"A hash of this Group DM icon","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this Group DM's owner","type":[[["Snowflake"]]],"meta":{"line":60,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"managed","description":"If the DM is managed by an application","type":[[["boolean"]]],"meta":{"line":66,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID of the application that made this Group DM, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":72,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"nicks","description":"Nicknames for group members","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["string",">"]]],"meta":{"line":79,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"recipients","description":"A collection of the recipients of this DM, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":87,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"owner","description":"The owner of this Group DM","readonly":true,"type":[[["User"]]],"meta":{"line":105,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":177,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":186,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"Gets the URL to this Group DM's icon.","params":[{"name":"options","description":"Options for the icon url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":116,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"equals","description":"Whether this channel equals another channel. It compares all properties, so for most operations\nit is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GroupDMChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":128,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits this Group DM.","params":[{"name":"data","description":"New data for this Group DM","type":[[["Object"]]]},{"name":"reason","description":"Reason for editing this Group DM","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":148,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"setIcon","description":"Sets a new icon for this Group DM.","params":[{"name":"icon","description":"The new icon of this Group DM","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":163,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for this Group DM.","params":[{"name":"name","description":"New name for this Group DM","type":[[["string"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":172,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"addUser","description":"Adds an user to this Group DM.","params":[{"name":"options","description":"Options for this method","type":[[["Object"]]]},{"name":"options.user","description":"User to add to this Group DM","type":[[["UserResolvable"]]]},{"name":"options.accessToken","description":"Access token to use to add the user to this Group DM\n(only available under a bot account)","optional":true,"type":[[["string"]]]},{"name":"options.nick","description":"Permanent nickname to give the user (only available under a bot account)","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":185,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"removeUser","description":"Removes an user from this Group DM.","params":[{"name":"user","description":"User to remove","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":199,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's name instead of the\nGroupDMChannel object.","examples":["// Logs: Hello from My Group DM!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":213,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'swiftly.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.results[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.total}`);\n}).catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":101,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":116,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":160,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":203,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":227,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":290,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":75,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":34,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with `guild.available`.</info>","extends":["Base"],"props":[{"name":"members","description":"A collection of members that are in this guild. The key is the member's ID, the value is the member","type":[[["GuildMemberStore","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":33,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A collection of channels that are in this guild. The key is the channel's ID, the value is the channel","type":[[["GuildChannelStore","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":39,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are in this guild. The key is the role's ID, the value is the role","type":[[["RoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":45,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this guild","type":[[["PresenceStore","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":51,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","type":[[["boolean"]]],"meta":{"line":59,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the guild, useful for comparisons","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":82,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon","nullable":true,"type":[[["string"]]],"meta":{"line":88,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":94,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":100,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild as of `READY`","type":[[["number"]]],"meta":{"line":106,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":112,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features partnered guilds have enabled","type":[[["Array","<"],["Features",">"]]],"meta":{"line":128,"file":"Guild.js","path":"src/structures"}},{"name":"applicationID","description":"The ID of the application that created this guild (if applicable)","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":134,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","nullable":true,"type":[[["number"]]],"meta":{"line":140,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":146,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelID","description":"The ID of the system channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":152,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild","type":[[["boolean"]]],"meta":{"line":158,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","type":[[["number"]]],"meta":{"line":164,"file":"Guild.js","path":"src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","type":[[["number"]]],"meta":{"line":170,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":176,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner","type":[[["Snowflake"]]],"meta":{"line":192,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A collection of emojis that are in this guild. The key is the emoji's ID, the value is the emoji.","type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":223,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":238,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":247,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":256,"file":"Guild.js","path":"src/structures"}},{"name":"verified","description":"If this guild is verified","readonly":true,"type":[[["boolean"]]],"meta":{"line":265,"file":"Guild.js","path":"src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon.","readonly":true,"type":[[["string"]]],"meta":{"line":286,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the guild","readonly":true,"type":[[["GuildMember"]]],"meta":{"line":307,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":316,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannel","description":"System channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":325,"file":"Guild.js","path":"src/structures"}},{"name":"voiceConnection","description":"If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":334,"file":"Guild.js","path":"src/structures"}},{"name":"position","description":"The position of this guild\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":345,"file":"Guild.js","path":"src/structures"}},{"name":"muted","description":"Whether the guild is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":357,"file":"Guild.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\none of `EVERYTHING`, `MENTIONS`, `NOTHING`\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":373,"file":"Guild.js","path":"src/structures"}},{"name":"mobilePush","description":"Whether to receive mobile push notifications\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":388,"file":"Guild.js","path":"src/structures"}},{"name":"suppressEveryone","description":"Whether to suppress everyone messages\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":403,"file":"Guild.js","path":"src/structures"}},{"name":"defaultRole","description":"The `@everyone` role of the guild","readonly":true,"type":[[["Role"]]],"meta":{"line":417,"file":"Guild.js","path":"src/structures"}},{"name":"me","description":"The client user as a GuildMember of this guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":426,"file":"Guild.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"_patch","description":"Sets up the guild.","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":77,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","params":[{"name":"options","description":"Options for the icon url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":276,"file":"Guild.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this guild's splash.","params":[{"name":"options","description":"Options for the splash url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":297,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the user is present in the guild.","examples":["// Get the guild member of a user\nconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":438,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetches a collection of banned users in this guild.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["BanInfo",">>"]]],"meta":{"line":453,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild.\nResolves with a collection mapping invites by their codes.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":470,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the guild.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":486,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVoiceRegions","description":"Fetches available voice regions.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":498,"file":"Guild.js","path":"src/structures"}},{"name":"fetchAuditLogs","description":"Fetches audit logs for this guild.","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.before","description":"Limit to entries from before specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.after","description":"Limit to entries from after specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.limit","description":"Limit number of entries","optional":true,"type":[[["number"]]]},{"name":"options.user","description":"Only show entries involving this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"options.type","description":"Only show entries involving this action type","optional":true,"type":[[["AuditLogAction"]],[["number"]]]}],"returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":521,"file":"Guild.js","path":"src/structures"}},{"name":"addMember","description":"Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.","params":[{"name":"user","description":"User to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the addition","type":[[["Object"]]]},{"name":"options.accessToken","description":"An OAuth2 access token for the user with the `guilds.join` scope granted to the\nbot's application","type":[[["string"]]]},{"name":"options.nick","description":"Nickname to give the member (requires `MANAGE_NICKNAMES`)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"Roles to add to the member\n(requires `MANAGE_ROLES`)","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.mute","description":"Whether the member should be muted (requires `MUTE_MEMBERS`)","optional":true,"type":[[["boolean"]]]},{"name":"options.deaf","description":"Whether the member should be deafened (requires `DEAFEN_MEMBERS`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":549,"file":"Guild.js","path":"src/structures"}},{"name":"search","description":"Performs a search within the entire guild.\n<warn>This is only available when using a user account.</warn>","examples":["guild.search({\n  content: 'swiftly.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.results[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.total}`);\n}).catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":583,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","examples":["// Set the guild name and region\nguild.edit({\n  name: 'Discord Guild',\n  region: 'london',\n})\n  .then(updated => console.log(`New guild name ${updated.name} in region ${updated.region}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]},{"name":"reason","description":"Reason for editing this guild","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":616,"file":"Guild.js","path":"src/structures"}},{"name":"setExplicitContentFilter","description":"Edits the level of the explicit content filter.","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":644,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edits the name of the guild.","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(updated => console.log(`Updated guild name to ${guild.name}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":659,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edits the region of the guild.","examples":["// Edit the guild region\nguild.setRegion('london')\n .then(updated => console.log(`Updated guild region to ${guild.region}`))\n .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's region","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":674,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edits the verification level of the guild.","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":689,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edits the AFK channel of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":704,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannel","description":"Edits the system channel of the guild.","examples":["// Edit the guild system channel\nguild.setSystemChannel(channel)\n .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel}`))\n .catch(console.error);"],"params":[{"name":"systemChannel","description":"The new system channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":719,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edits the AFK timeout of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":734,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Sets a new guild icon.","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(updated => console.log('Updated the guild icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":749,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","examples":["// Edit the guild owner\nguild.setOwner(guild.members.first())\n .then(updated => console.log(`Updated the guild owner to ${updated.owner.username}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["GuildMemberResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":764,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Sets a new guild splash screen.","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(updated => console.log('Updated the guild splash'))\n .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's splash screen","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":779,"file":"Guild.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the guild in the guild listing.\n<warn>This is only available when using a user account.</warn>","params":[{"name":"position","description":"Absolute or relative position","type":[[["number"]]]},{"name":"relative","description":"Whether to position relatively or absolutely","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":790,"file":"Guild.js","path":"src/structures"}},{"name":"acknowledge","description":"Marks all messages in this guild as read.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":802,"file":"Guild.js","path":"src/structures"}},{"name":"allowDMs","description":"Whether to allow direct messages from guild members.\n<warn>This is only available when using a user account.</warn>","params":[{"name":"allow","description":"Whether to allow direct messages","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":817,"file":"Guild.js","path":"src/structures"}},{"name":"sync","description":"Syncs this guild (already done automatically every 30 seconds).\n<warn>This is only available when using a user account.</warn>","meta":{"line":828,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPositions","description":"Batch-updates the guild's channels' positions.","examples":["guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n  .then(guild => console.log(`Updated channel positions for ${guild.id}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":848,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Leaves the guild.","examples":["// Leave a guild\nguild.leave()\n  .then(g => console.log(`Left the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":871,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Deletes the guild.","examples":["// Delete a guild\nguild.delete()\n  .then(g => console.log(`Deleted the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":886,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":898,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${guild}!`);"],"returns":[[["string"]]],"meta":{"line":933,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedRoles","description":"Creates a collection of this guild's roles, sorted by their position and IDs.","access":"private","returns":[[["Collection","<"],["Role",">"]]],"meta":{"line":942,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedChannels","description":"Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.","access":"private","params":[{"name":"channel","description":"Category to get the channels of","optional":true,"type":[[["GuildChannel"]]]}],"returns":[[["Collection","<"],["GuildChannel",">"]]],"meta":{"line":952,"file":"Guild.js","path":"src/structures"}},{"name":"_memberSpeakUpdate","description":"Handles a user speaking update in a voice channel.","access":"private","params":[{"name":"user","description":"ID of the user that the update is for","type":[[["Snowflake"]]]},{"name":"speaking","description":"Whether the user is speaking","type":[[["boolean"]]]}],"meta":{"line":965,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":25,"file":"Guild.js","path":"src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":115,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":126,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["AuditLogTargetType"]]],"meta":{"line":18,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Actions","description":"All available actions keyed under their names to their numeric values.","scope":"static","type":[[["AuditLogAction"]]],"meta":{"line":68,"file":"GuildAuditLogs.js","path":"src/structures"}}],"methods":[{"name":"build","description":"Handles possible promises for entry targets.","scope":"static","returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":137,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"targetType","description":"Finds the target type from the entry action.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogTargetType"]]],"meta":{"line":159,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"Finds the action type from the entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogActionType"]]],"meta":{"line":185,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":107,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","type":[[["AuditLogTargetType"]]],"meta":{"line":235,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"The action type of this entry","type":[[["AuditLogActionType"]]],"meta":{"line":241,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"action","description":"Specific action type of this entry in its string presentation","type":[[["AuditLogAction"]]],"meta":{"line":247,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"reason","description":"The reason of this entry","nullable":true,"type":[[["string"]]],"meta":{"line":253,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"executor","description":"The user that executed this entry","type":[[["User"]]],"meta":{"line":259,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"changes","description":"Specific property changes","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":273,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"id","description":"The ID of this entry","type":[[["Snowflake"]]],"meta":{"line":279,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"extra","description":"Any extra data from the entry","type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":285,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"target","description":"The target of this entry","type":[[["AuditLogEntryTarget"]]],"meta":{"line":319,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","readonly":true,"type":[[["number"]]],"meta":{"line":362,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdAt","description":"The time this entry was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":371,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":228,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel (i.g. a {@link TextChannel}, {@link VoiceChannel} or {@link CategoryChannel}).","extends":["Channel"],"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":23,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":39,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":45,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":51,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":64,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":89,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":266,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":492,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":516,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\none of `EVERYTHING`, `MENTIONS`, `NOTHING`, `INHERIT`\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Permissions"]]],"meta":{"line":139,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Permissions"]]],"meta":{"line":165,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(() => console.log('Done!'))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":250,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":310,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":351,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","params":[{"name":"channel","description":"Parent channel","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":363,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":381,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":398,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":426,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Optional name for the new channel, otherwise it has the name\nof this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.withPermissions","description":"Whether to clone the channel with this channel's\npermission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.parent","description":"The parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":448,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":468,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then() // Success\n  .catch(console.error); // Log error"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":506,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":62,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":15,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmoji","description":"Represents a custom emoji.","extends":["Emoji"],"props":[{"name":"guild","description":"The guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":18,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":30,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":36,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at","readonly":true,"type":[[["number"]]],"meta":{"line":46,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":55,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":64,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":14,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":20,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":26,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}}],"methods":[{"name":"edit","description":"Edits the emoji.","examples":["// Edit an emoji\nemoji.edit({name: 'newemoji'})\n  .then(e => console.log(`Edited emoji ${e}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the emoji","type":[[["Guild"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":90,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":105,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"addRestrictedRole","description":"Adds a role to the list of roles that can use this emoji.","params":[{"name":"role","description":"The role to add","type":[[["Role"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":114,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"addRestrictedRoles","description":"Adds multiple roles to the list of roles that can use this emoji.","params":[{"name":"roles","description":"Roles to add","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":123,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"removeRestrictedRole","description":"Removes a role from the list of roles that can use this emoji.","params":[{"name":"role","description":"The role to remove","type":[[["Role"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":141,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"removeRestrictedRoles","description":"Removes multiple roles from the list of roles that can use this emoji.","params":[{"name":"roles","description":"Roles to remove","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":150,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"delete","description":"Deletes the emoji.","params":[{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":168,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","params":[{"name":"other","description":"The emoji to compare it to","type":[[["GuildEmoji"]],[["Object"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the emoji is equal to the given emoji or not"},"meta":{"line":178,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":61,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":10,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","extends":["Base"],"implements":["TextBasedChannel"],"props":[{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":22,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance Represents","type":[[["User"]]],"meta":{"line":28,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":38,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":44,"file":"GuildMember.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is speaking","type":[[["boolean"]]],"meta":{"line":48,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this guild member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","type":[[["number"]]],"meta":{"line":62,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","readonly":true,"type":[[["boolean"]]],"meta":{"line":82,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","readonly":true,"type":[[["boolean"]]],"meta":{"line":89,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","readonly":true,"type":[[["boolean"]]],"meta":{"line":96,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","readonly":true,"type":[[["boolean"]]],"meta":{"line":103,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceSessionID","description":"The voice session ID of this member (if any)","readonly":true,"nullable":true,"type":[[["Snowflake"]]],"meta":{"line":110,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannelID","description":"The voice channel ID of this member, (if any)","readonly":true,"nullable":true,"type":[[["Snowflake"]]],"meta":{"line":117,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the member joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":124,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this guild member","readonly":true,"type":[[["Presence"]]],"meta":{"line":133,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A list of roles that are applied to this GuildMember, mapped by the role ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":142,"file":"GuildMember.js","path":"src/structures"}},{"name":"highestRole","description":"The role of the member with the highest position","readonly":true,"type":[[["Role"]]],"meta":{"line":161,"file":"GuildMember.js","path":"src/structures"}},{"name":"colorRole","description":"The role of the member used to set their color","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":170,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayColor","description":"The displayed color of the member in base 10","readonly":true,"type":[[["number"]]],"meta":{"line":181,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayHexColor","description":"The displayed color of the member in hexadecimal","readonly":true,"type":[[["string"]]],"meta":{"line":191,"file":"GuildMember.js","path":"src/structures"}},{"name":"hoistRole","description":"The role of the member used to hoist them in a separate category in the users list","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":201,"file":"GuildMember.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is muted in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":212,"file":"GuildMember.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is deafened in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":221,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannel","description":"The voice channel this member is in, if any","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":230,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this user","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":239,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayName","description":"The nickname of the member, or their username if they don't have one","readonly":true,"type":[[["string"]]],"meta":{"line":248,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for the guild member, taking only roles into account","readonly":true,"type":[[["Permissions"]]],"meta":{"line":257,"file":"GuildMember.js","path":"src/structures"}},{"name":"manageable","description":"Whether the member is manageable in terms of role hierarchy by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":267,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether the member is kickable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":278,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether the member is bannable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":287,"file":"GuildMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\ntaking into account roles and permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":297,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of the member's roles have a permission.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.checkOwner","description":"Whether to allow being the guild's owner to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":311,"file":"GuildMember.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":322,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edits a guild member.","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildMemberEditData"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":342,"file":"GuildMember.js","path":"src/structures"}},{"name":"setMute","description":"Mute/unmutes a user.","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":375,"file":"GuildMember.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafen/undeafens a user.","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":385,"file":"GuildMember.js","path":"src/structures"}},{"name":"setVoiceChannel","description":"Moves the guild member to the given channel.","params":[{"name":"channel","description":"The channel to move the member to","type":[[["ChannelResolvable"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":394,"file":"GuildMember.js","path":"src/structures"}},{"name":"setRoles","description":"Sets the roles applied to the member.","examples":["// Set the member's roles to a single role\nguildMember.setRoles(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all the roles from a member\nguildMember.setRoles([])\n  .then(member => console.log(`Member roles is now of ${member.roles.size} size`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":414,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRole","description":"Adds a single role to the member.","params":[{"name":"role","description":"The role or ID of the role to add","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for adding the role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":424,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRoles","description":"Adds multiple roles to the member.","params":[{"name":"roles","description":"The roles or role IDs to add","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for adding the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":443,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRole","description":"Removes a single role from the member.","params":[{"name":"role","description":"The role or ID of the role to remove","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for removing the role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":462,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRoles","description":"Removes multiple roles from the member.","params":[{"name":"roles","description":"The roles or role IDs to remove","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for removing the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":482,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Sets the nickname for the guild member.","params":[{"name":"nick","description":"The nickname for the guild member","type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":502,"file":"GuildMember.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":510,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this guild member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":518,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kicks this member from the guild.","params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":527,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Bans this guild member.","examples":["// ban a guild member\nguildMember.ban({ days: 7, reason: 'They deserved it' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":549,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":560,"file":"GuildMember.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"GuildMember.js","path":"src/structures"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","abstract":true,"props":[{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":27,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":39,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":45,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":51,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":57,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":64,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":120,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":77,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":98,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":152,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","meta":{"line":170,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collect","description":"Handles incoming events from the `handleCollect` function. Returns null if the event should not\nbe collected, or returns an object describing the data that should be stored.","see":["Collector#handleCollect"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["Object"]]],"description":"Data to insert into collection, if any","nullable":true},"meta":{"line":184,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Handles incoming events from the `handleDispose`. Returns null if the event should not\nbe disposed, or returns the key that should be removed.","see":["Collector#handleDispose"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"Key to remove from the collection, if any","nullable":true},"meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","abstract":true,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":201,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":83,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Emitted whenever an element is disposed of.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":105,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":158,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.\n<warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>","extends":["Base"],"props":[{"name":"guild","description":"The guild the invite is for","type":[[["Guild"]]],"meta":{"line":20,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":26,"file":"Invite.js","path":"src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for","type":[[["number"]]],"meta":{"line":32,"file":"Invite.js","path":"src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for","type":[[["number"]]],"meta":{"line":38,"file":"Invite.js","path":"src/structures"}},{"name":"textChannelCount","description":"The number of text channels the guild this invite goes to has","type":[[["number"]]],"meta":{"line":44,"file":"Invite.js","path":"src/structures"}},{"name":"voiceChannelCount","description":"The number of voice channels the guild this invite goes to has","type":[[["number"]]],"meta":{"line":50,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","type":[[["boolean"]]],"meta":{"line":56,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","type":[[["number"]]],"meta":{"line":68,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","type":[[["number"]]],"meta":{"line":74,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","type":[[["User"]]],"meta":{"line":81,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The channel the invite is for","type":[[["GuildChannel"]]],"meta":{"line":88,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","type":[[["number"]]],"meta":{"line":94,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":102,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"type":[[["number"]]],"meta":{"line":111,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire at","readonly":true,"type":[[["Date"]]],"meta":{"line":120,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":129,"file":"Invite.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":138,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":149,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":9,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a message on Discord.","extends":["Base"],"props":[{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]],"meta":{"line":27,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["Snowflake"]]],"meta":{"line":37,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["MessageType"]]],"meta":{"line":43,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":49,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","type":[[["User"]]],"meta":{"line":55,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member.\nOnly available if the message comes from a guild where the author is still a member","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":62,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":68,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":74,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery","type":[[["string"]]],"meta":{"line":80,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":86,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":92,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["MessageAttachment",">"]]],"meta":{"line":98,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":109,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":115,"file":"Message.js","path":"src/structures"}},{"name":"reactions","description":"A collection of reactions to this message, mapped by the reaction ID","type":[[["ReactionStore","<"],["Snowflake",", "],["MessageReaction",">"]]],"meta":{"line":121,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","type":[[["MessageMentions"]]],"meta":{"line":132,"file":"Message.js","path":"src/structures"}},{"name":"webhookID","description":"ID of the webhook that sent the message, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":138,"file":"Message.js","path":"src/structures"}},{"name":"application","description":"Supplimental application information for group activities","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":144,"file":"Message.js","path":"src/structures"}},{"name":"activity","description":"Group activity","nullable":true,"type":[[["Object"]]],"meta":{"line":150,"file":"Message.js","path":"src/structures"}},{"name":"hit","description":"Whether this message is a hit in a search","nullable":true,"type":[[["boolean"]]],"meta":{"line":159,"file":"Message.js","path":"src/structures"}},{"name":"_edits","description":"The previous versions of the message, sorted with the most recent first","access":"private","type":[[["Array","<"],["Message",">"]]],"meta":{"line":166,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent at","readonly":true,"type":[[["Date"]]],"meta":{"line":209,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":218,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":227,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":237,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version\nSorted from latest (first) to oldest (last)","readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":320,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":331,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":340,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":351,"file":"Message.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"patch","description":"Updates the message.","access":"private","params":[{"name":"data","description":"Raw Discord message update data","type":[[["Object"]]]}],"meta":{"line":174,"file":"Message.js","path":"src/structures"}},{"name":"createReactionCollector","description":"Creates a reaction collector.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID';\nconst collector = message.createReactionCollector(filter, { time: 15000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to apply","type":[[["CollectorFilter"]]]},{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[["ReactionCollector"]]],"meta":{"line":281,"file":"Message.js","path":"src/structures"}},{"name":"awaitReactions","description":"Similar to createReactionCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nmessage.awaitReactions(filter, { time: 15000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["MessageReaction",">>"]]],"meta":{"line":304,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edits the content of the message.","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`Updated the content of a message from ${msg.author}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageEditOptions"]],[["MessageEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":375,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":399,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":408,"file":"Message.js","path":"src/structures"}},{"name":"react","description":"Adds a reaction to the message.","params":[{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":418,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message.","examples":["// Delete a message\nmessage.delete()\n  .then(msg => console.log(`Deleted message from ${msg.author}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":444,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Replies to the message.","examples":["// Reply to a message\nmessage.reply('Hey, I\\'m a reply!')\n  .then(msg => console.log(`Sent a reply to ${msg.author}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":473,"file":"Message.js","path":"src/structures"}},{"name":"acknowledge","description":"Marks the message as read.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":488,"file":"Message.js","path":"src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":501,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":514,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":543,"file":"Message.js","path":"src/structures"}}],"meta":{"line":19,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an attachment in a message.","construct":{"name":"MessageAttachment","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"type":[[["string"]]]}]},"props":[{"name":"name","description":"The name of the file","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":19,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"attachment","description":"The file","readonly":true,"type":[[["BufferResolvable"]],[["Stream"]]],"meta":{"line":28,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["Snowflake"]]],"meta":{"line":79,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"size","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":85,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":91,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":97,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":103,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":109,"file":"MessageAttachment.js","path":"src/structures"}}],"methods":[{"name":"setAttachment","description":"Sets the file of this attachment.","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":38,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"setFile","description":"Sets the file of this attachment.","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":48,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of this attachment.","params":[{"name":"name","description":"The name of the image","type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":58,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"_attach","description":"Sets the file of this attachment.","access":"private","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file","type":[[["string"]]]}],"meta":{"line":69,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":6,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.","extends":["Collector"],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]]},{"name":"filter","description":"The filter to be applied to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","type":[[["TextBasedChannel"]]],"meta":{"line":28,"file":"MessageCollector.js","path":"src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","type":[[["number"]]],"meta":{"line":34,"file":"MessageCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":27,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":39,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":45,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":51,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":57,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":64,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":120,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles a message for possible collection.","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":57,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a message for possible disposal.","params":[{"name":"message","description":"The message that could be disposed of","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":73,"file":"MessageCollector.js","path":"src/structures"}},{"name":"endReason","description":"Checks after un/collection to see if the collector is done.","access":"private","returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":87,"file":"MessageCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":77,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":98,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":152,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":170,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever a message is collected.","params":[{"name":"message","description":"The message that was collected","type":[[["Message"]]]}],"meta":{"line":58,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a message is disposed of.","params":[{"name":"message","description":"The message that was disposed of","type":[[["Message"]]]}],"meta":{"line":74,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":158,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in a message (image/video preview, rich embed, etc.)","props":[{"name":"type","description":"The type of this embed","type":[[["string"]]],"meta":{"line":18,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":24,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":30,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"color","description":"The color of the embed","nullable":true,"type":[[["number"]]],"meta":{"line":42,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":48,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"fields","description":"The fields of this embed","type":[[["Array","<"],["Object",">"]]],"props":[{"name":"name","description":"The name of this field","type":[[["string"]]]},{"name":"value","description":"The value of this field","type":[[["string"]]]},{"name":"inline","description":"If this field will be displayed inline","type":[[["boolean"]]]}],"meta":{"line":57,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this thumbnail","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this thumbnail","type":[[["string"]]]},{"name":"height","description":"Height of this thumbnail","type":[[["number"]]]},{"name":"width","description":"Width of this thumbnail","type":[[["number"]]]}],"meta":{"line":67,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"image","description":"The image of this embed, if there is one","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this image","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this image","type":[[["string"]]]},{"name":"height","description":"Height of this image","type":[[["number"]]]},{"name":"width","description":"Width of this image","type":[[["number"]]]}],"meta":{"line":82,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"video","description":"The video of this embed (if there is one)","readonly":true,"nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL of this video","type":[[["string"]]]},{"name":"height","description":"Height of this video","type":[[["number"]]]},{"name":"width","description":"Width of this video","type":[[["number"]]]}],"meta":{"line":97,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this author","type":[[["string"]]]},{"name":"url","description":"URL of this author","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this author","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this author","type":[[["string"]]]}],"meta":{"line":107,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this provider","type":[[["string"]]]},{"name":"url","description":"URL of this provider","type":[[["string"]]]}],"meta":{"line":120,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"footer","description":"The footer of this embed","nullable":true,"type":[[["Object"]]],"props":[{"name":"text","description":"The text of this footer","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this footer","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this footer","type":[[["string"]]]}],"meta":{"line":129,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"files","description":"The files of this embed","nullable":true,"type":[[["Object"]]],"props":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]]}],"meta":{"line":141,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"createdAt","description":"The date this embed was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":155,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the embed color, with a leading hash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":164,"file":"MessageEmbed.js","path":"src/structures"}}],"methods":[{"name":"addField","description":"Adds a field to the embed (max 25).","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":175,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"addBlankField","description":"Convenience function for `<MessageEmbed>.addField('\\u200B', '\\u200B', inline)`.","params":[{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":190,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"attachFiles","description":"Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Multiple files can be attached.","params":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":200,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setAuthor","description":"Sets the author of this embed.","params":[{"name":"name","description":"The name of the author","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the author","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the author","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":216,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setColor","description":"Sets the color of this embed.","params":[{"name":"color","description":"The color of the embed","type":[[["ColorResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":226,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setDescription","description":"Sets the description of this embed.","params":[{"name":"description","description":"The description","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":236,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setFooter","description":"Sets the footer of this embed.","params":[{"name":"text","description":"The text of the footer","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the footer","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":249,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setImage","description":"Sets the image of this embed.","params":[{"name":"url","description":"The URL of the image","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":261,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setThumbnail","description":"Sets the thumbnail of this embed.","params":[{"name":"url","description":"The URL of the thumbnail","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":271,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTimestamp","description":"Sets the timestamp of this embed.","params":[{"name":"timestamp","description":"The timestamp","optional":true,"default":"current date","type":[[["Date"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":281,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTitle","description":"Sets the title of this embed.","params":[{"name":"title","description":"The title","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":291,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setURL","description":"Sets the URL of this embed.","params":[{"name":"url","description":"The URL","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":303,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"_apiTransform","description":"Transforms the embed object to be processed.","access":"private","returns":{"types":[[["Object"]]],"description":"The raw data of this embed"},"meta":{"line":313,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":8,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","type":[[["boolean"]]],"meta":{"line":13,"file":"MessageMentions.js","path":"src/structures"}},{"name":"users","description":"Any users that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":21,"file":"MessageMentions.js","path":"src/structures"}},{"name":"roles","description":"Any roles that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":39,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_content","description":"Content of the message","access":"private","type":[[["Message"]]],"meta":{"line":56,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_client","description":"The client the message is from","access":"private","type":[[["Client"]]],"meta":{"line":63,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_guild","description":"The guild the message is in","access":"private","nullable":true,"type":[[["Guild"]]],"meta":{"line":70,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_members","description":"Cached members for {@MessageMention#members}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":77,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_channels","description":"Cached channels for {@MessageMention#channels}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":84,"file":"MessageMentions.js","path":"src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link TextChannel}s)","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":92,"file":"MessageMentions.js","path":"src/structures"}},{"name":"channels","description":"Any channels that were mentioned","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":108,"file":"MessageMentions.js","path":"src/structures"}},{"name":"EVERYONE_PATTERN","description":"Regular expression that globally matches `@everyone` and `@here`","scope":"static","type":[[["RegExp"]]],"meta":{"line":148,"file":"MessageMentions.js","path":"src/structures"}},{"name":"USERS_PATTERN","description":"Regular expression that globally matches user mentions like `<@81440962496172032>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":154,"file":"MessageMentions.js","path":"src/structures"}},{"name":"ROLES_PATTERN","description":"Regular expression that globally matches role mentions like `<@&297577916114403338>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":160,"file":"MessageMentions.js","path":"src/structures"}},{"name":"CHANNELS_PATTERN","description":"Regular expression that globally matches channel mentions like `<#222079895583457280>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":166,"file":"MessageMentions.js","path":"src/structures"}}],"methods":[{"name":"has","description":"Checks if a user, guild member, role, or channel is mentioned.\nTakes into account user mentions, role mentions, and @everyone/@here mentions.","params":[{"name":"data","description":"User/GuildMember/Role/Channel to check","type":[[["UserResolvable"]],[["GuildMember"]],[["Role"]],[["GuildChannel"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.ignoreDirect","description":"Whether to ignore direct mentions to the item","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreRoles","description":"Whether to ignore role mentions to a guild member","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreEveryone","description":"Whether to ignore everyone/here mentions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":129,"file":"MessageMentions.js","path":"src/structures"}}],"meta":{"line":7,"file":"MessageMentions.js","path":"src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","props":[{"name":"message","description":"The message that this reaction refers to","type":[[["Message"]]],"meta":{"line":14,"file":"MessageReaction.js","path":"src/structures"}},{"name":"me","description":"Whether the client has given this reaction","type":[[["boolean"]]],"meta":{"line":20,"file":"MessageReaction.js","path":"src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","type":[[["number"]]],"meta":{"line":26,"file":"MessageReaction.js","path":"src/structures"}},{"name":"users","description":"The users that have given this reaction, mapped by their ID","type":[[["ReactionUserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":32,"file":"MessageReaction.js","path":"src/structures"}},{"name":"emoji","description":"The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\nobject which has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","readonly":true,"type":[[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":44,"file":"MessageReaction.js","path":"src/structures"}}],"meta":{"line":8,"file":"MessageReaction.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":8,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a user ID or a role ID","type":[[["Snowflake"]]],"meta":{"line":24,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["OverwriteType"]]],"meta":{"line":37,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"denied","description":"The permissions that are denied for the user or role.","type":[[["Permissions"]]],"meta":{"line":43,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allowed","description":"The permissions that are allowed for the user or role.","type":[[["Permissions"]]],"meta":{"line":49,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this Permission Overwrite.","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":57,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":6,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a user's presence.","props":[{"name":"status","description":"The status of the presence:\n\n* **`online`** - user is online\n* **`offline`** - user is offline or invisible\n* **`idle`** - user is AFK\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":22,"file":"Presence.js","path":"src/structures"}},{"name":"activity","description":"The activity of the presence","nullable":true,"type":[[["Activity"]]],"meta":{"line":29,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another.","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":45,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":6,"file":"Presence.js","path":"src/structures"}},{"name":"Activity","description":"Represents an activity that is part of a user's presence.","props":[{"name":"name","description":"The name of the activity being played","type":[[["string"]]],"meta":{"line":65,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the activity status","type":[[["ActivityType"]]],"meta":{"line":71,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the activity is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":77,"file":"Presence.js","path":"src/structures"}},{"name":"details","description":"Details about the activity","nullable":true,"type":[[["string"]]],"meta":{"line":83,"file":"Presence.js","path":"src/structures"}},{"name":"state","description":"State of the activity","nullable":true,"type":[[["string"]]],"meta":{"line":89,"file":"Presence.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID associated with this activity","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":95,"file":"Presence.js","path":"src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":103,"file":"Presence.js","path":"src/structures"}},{"name":"party","description":"Party of the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"id","description":"ID of the party","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":114,"file":"Presence.js","path":"src/structures"}},{"name":"assets","description":"Assets for rich presence","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":120,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this activity is equal to another activity.","params":[{"name":"activity","description":"The activity to compare with","type":[[["Activity"]]]}],"returns":[[["boolean"]]],"meta":{"line":128,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":57,"file":"Presence.js","path":"src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"largeText","description":"Hover text for the large image","nullable":true,"type":[[["string"]]],"meta":{"line":153,"file":"Presence.js","path":"src/structures"}},{"name":"smallText","description":"Hover text for the small image","nullable":true,"type":[[["string"]]],"meta":{"line":159,"file":"Presence.js","path":"src/structures"}},{"name":"largeImage","description":"ID of the large image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":165,"file":"Presence.js","path":"src/structures"}},{"name":"smallImage","description":"ID of the small image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":171,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"smallImageURL","description":"Gets the URL of the small image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The small image URL","nullable":true},"meta":{"line":181,"file":"Presence.js","path":"src/structures"}},{"name":"largeImageURL","description":"Gets the URL of the large image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The large image URL","nullable":true},"meta":{"line":194,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":145,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.","extends":["Collector"],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"filter","description":"The filter to apply to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]],"meta":{"line":29,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"users","description":"The users which have reacted to this message","type":[[["Collection"]]],"meta":{"line":35,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"total","description":"The total number of reactions collected","type":[[["number"]]],"meta":{"line":41,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":27,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":39,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":45,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":51,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":57,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":64,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":120,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming reaction for possible collection.","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":72,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a reaction deletion for possible disposal.","params":[{"name":"reaction","description":"The reaction to possibly dispose of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":89,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"empty","description":"Empties this reaction collector.","meta":{"line":115,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":77,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":98,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":152,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":170,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","inherits":"Collector#endReason","inherited":true,"abstract":false,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":201,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"key","description":"Gets the collector key for a reaction.","scope":"static","params":[{"name":"reaction","description":"The message reaction to get the key for","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":134,"file":"ReactionCollector.js","path":"src/structures"}}],"events":[{"name":"collect","description":"Emitted whenever a reaction is collected.","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":73,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a reaction is disposed of.","params":[{"name":"reaction","description":"The reaction that was disposed of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":90,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"remove","description":"Emitted whenever a reaction is removed from a message. Will emit on all reaction removals,\nas opposed to {@link Collector#dispose} which will only be emitted when the entire reaction\nis removed.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":98,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":158,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":16,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","extends":["Emoji"],"props":[{"name":"reaction","description":"The message reaction this emoji refers to","type":[[["MessageReaction"]]],"meta":{"line":16,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":14,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":20,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":26,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":61,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":9,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"Role","description":"Represents a role on Discord.","extends":["Base"],"props":[{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["Snowflake"]]],"meta":{"line":29,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":35,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":41,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":47,"file":"Role.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the role from the API","type":[[["number"]]],"meta":{"line":53,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The permissions of the role","type":[[["Permissions"]]],"meta":{"line":59,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":65,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":71,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":79,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":88,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":97,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":108,"file":"Role.js","path":"src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":117,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","readonly":true,"type":[[["number"]]],"meta":{"line":129,"file":"Role.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the this role's position is lower (other role's is higher),\npositive number if the this one is higher (other's is lower), 0 if equal"},"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role.","examples":["// Edit a role\nrole.edit({name: 'new role'})\n  .then(r => console.log(`Edited role ${r}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]},{"name":"reason","description":"Reason for editing this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":168,"file":"Role.js","path":"src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\ntaking into account permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":204,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the role.","examples":["// Set the name of the role\nrole.setName('new role')\n  .then(r => console.log(`Edited name of role ${r}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":221,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Sets a new color for the role.","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(r => console.log(`Set color of role ${r}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":236,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Sets whether or not the role should be hoisted.","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(r => console.log(`Role hoisted: ${r.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":251,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Sets the permissions of the role.","examples":["// Set the permissions of the role\nrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n  .then(r => console.log(`Role updated ${r}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":266,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Sets whether this role is mentionable.","examples":["// Make the role mentionable\nrole.setMentionable(true)\n  .then(r => console.log(`Role updated ${r}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":281,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the role.","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(r => console.log(`Role position: ${r.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":298,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role.","examples":["// Delete a role\nrole.delete()\n  .then(r => console.log(`Deleted role ${r}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":320,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":335,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the role's mention instead of the Role object.","examples":["// Logs: Role: <@&123456789012345678>\nconsole.log(`Role: ${role}`);"],"returns":[[["string"]]],"meta":{"line":353,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":365,"file":"Role.js","path":"src/structures"}}],"meta":{"line":11,"file":"Role.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":["GuildChannel"],"implements":["TextBasedChannel"],"props":[{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":34,"file":"TextChannel.js","path":"src/structures"}},{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":177,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":186,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":23,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":39,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":45,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":51,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":64,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":89,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":266,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":492,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":516,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\none of `EVERYTHING`, `MENTIONS`, `NOTHING`, `INHERIT`\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":47,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":55,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","examples":["channel.createWebhook('Snek', 'https://i.imgur.com/mI8XcpG.jpg')\n  .then(webhook => console.log(`Created webhook ${webhook}`))\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":75,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'swiftly.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.results[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.total}`);\n}).catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":101,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":116,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":160,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":203,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":227,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.\n<warn>This is only available when using a bot account.</warn>","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":253,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":290,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Permissions"]]],"meta":{"line":139,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Permissions"]]],"meta":{"line":165,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(() => console.log('Done!'))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":250,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":310,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":351,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"params":[{"name":"channel","description":"Parent channel","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":363,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":381,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":398,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":426,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Optional name for the new channel, otherwise it has the name\nof this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.withPermissions","description":"Whether to clone the channel with this channel's\npermission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.parent","description":"The parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":448,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":468,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then() // Success\n  .catch(console.error); // Log error"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":506,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":62,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","extends":["Base"],"implements":["TextBasedChannel"],"props":[{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":23,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":34,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":59,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":65,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":91,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":117,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0086`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":139,"file":"User.js","path":"src/structures"}},{"name":"note","description":"The note that is set for the user\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":149,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":188,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the user's avatar.","params":[{"name":"options","description":"Options for the avatar url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":107,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","params":[{"name":"options","description":"Options for the avatar url","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"options.size","description":"One of `128`, `256`, `512`, `1024`, `2048`","optional":true,"default":128,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":130,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":168,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":178,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":196,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":208,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Gets the profile of the user.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<"],["UserProfile",">"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"setNote","description":"Sets a note for the user.\n<warn>This is only available when using a user account.</warn>","params":[{"name":"note","description":"The note to set for the user","type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":229,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":240,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":257,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":13,"file":"User.js","path":"src/structures"}},{"name":"UserConnection","description":"Represents a user connection (or \"platform identity\").","props":[{"name":"user","description":"The user that owns the connection","type":[[["User"]]],"meta":{"line":10,"file":"UserConnection.js","path":"src/structures"}},{"name":"type","description":"The type of the connection","type":[[["string"]]],"meta":{"line":20,"file":"UserConnection.js","path":"src/structures"}},{"name":"name","description":"The username of the connection account","type":[[["string"]]],"meta":{"line":26,"file":"UserConnection.js","path":"src/structures"}},{"name":"id","description":"The id of the connection account","type":[[["string"]]],"meta":{"line":32,"file":"UserConnection.js","path":"src/structures"}},{"name":"revoked","description":"Whether the connection is revoked","type":[[["boolean"]]],"meta":{"line":38,"file":"UserConnection.js","path":"src/structures"}},{"name":"integrations","description":"Partial server integrations (not yet implemented)","type":[[["Array","<"],["Object",">"]]],"meta":{"line":44,"file":"UserConnection.js","path":"src/structures"}}],"meta":{"line":4,"file":"UserConnection.js","path":"src/structures"}},{"name":"UserProfile","description":"Represents a user's profile on Discord.","extends":["Base"],"props":[{"name":"user","description":"The owner of the profile","type":[[["User"]]],"meta":{"line":18,"file":"UserProfile.js","path":"src/structures"}},{"name":"mutualGuilds","description":"The guilds that the client user and the user share","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":24,"file":"UserProfile.js","path":"src/structures"}},{"name":"connections","description":"The user's connections","type":[[["Collection","<"],["Snowflake",", "],["UserConnection",">"]]],"meta":{"line":30,"file":"UserProfile.js","path":"src/structures"}},{"name":"premium","description":"If the user has Discord Premium","type":[[["boolean"]]],"meta":{"line":40,"file":"UserProfile.js","path":"src/structures"}},{"name":"_flags","description":"The Bitfield of the users' flags","access":"private","type":[[["number"]]],"meta":{"line":47,"file":"UserProfile.js","path":"src/structures"}},{"name":"premiumSince","description":"The date since which the user has had Discord Premium","nullable":true,"type":[[["Date"]]],"meta":{"line":53,"file":"UserProfile.js","path":"src/structures"}},{"name":"flags","description":"The flags the user has","readonly":true,"type":[[["Array","<"],["UserFlags",">"]]],"meta":{"line":70,"file":"UserProfile.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"meta":{"line":10,"file":"UserProfile.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":["GuildChannel"],"props":[{"name":"members","description":"The members in this voice channel","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":14,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":28,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":34,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"connection","description":"The voice connection for this voice channel, if the client is connected","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":42,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"full","description":"Checks if the voice channel is full","readonly":true,"type":[[["boolean"]]],"meta":{"line":53,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Checks if the client has permission join the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":62,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":74,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":23,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":39,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":45,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":51,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":64,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":89,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":492,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":516,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\none of `EVERYTHING`, `MENTIONS`, `NOTHING`, `INHERIT`\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":24,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":42,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel.","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48000)\n  .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":89,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":104,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this voice channel.","examples":["// Join a voice channel\nvoiceChannel.join()\n  .then(connection => console.log('Connected!'))\n  .catch(console.error);"],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":117,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel.","examples":["// Leave a voice channel\nvoiceChannel.leave();"],"meta":{"line":128,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Permissions"]]],"meta":{"line":139,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Permissions"]]],"meta":{"line":165,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(() => console.log('Done!'))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":250,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":310,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":351,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"params":[{"name":"channel","description":"Parent channel","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":363,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":381,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":398,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":426,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Optional name for the new channel, otherwise it has the name\nof this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.withPermissions","description":"Whether to clone the channel with this channel's\npermission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.parent","description":"The parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":448,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":468,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then() // Success\n  .catch(console.error); // Log error"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":506,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":62,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":10,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The ID of the region","type":[[["string"]]],"meta":{"line":10,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"name","description":"Name of the region","type":[[["string"]]],"meta":{"line":16,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"vip","description":"Whether the region is VIP-only","type":[[["boolean"]]],"meta":{"line":22,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","type":[[["boolean"]]],"meta":{"line":28,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"optimal","description":"Whether the region is optimal","type":[[["boolean"]]],"meta":{"line":34,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"custom","description":"Whether the region is custom","type":[[["boolean"]]],"meta":{"line":40,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"sampleHostname","description":"A sample hostname for what a connection might look like","type":[[["string"]]],"meta":{"line":46,"file":"VoiceRegion.js","path":"src/structures"}}],"meta":{"line":4,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":9,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":24,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","type":[[["string"]]],"meta":{"line":30,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":42,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":48,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":54,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":61,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","examples":["// Send a message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Object",")>"]]],"meta":{"line":97,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Object",")>"]]],"meta":{"line":148,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edits the webhook.","params":[{"name":"options","description":"Options","type":[[["Object"]]]},{"name":"options.name","description":"New name for this webhook","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.avatar","description":"New avatar for this webhook","optional":true,"type":[[["BufferResolvable"]]]},{"name":"options.channel","description":"New channel for this webhook","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for editing this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":168,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Deletes the webhook.","params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":189,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":7,"file":"Webhook.js","path":"src/structures"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout swiftly.js rather than Arrays for anything that has\nan ID, for significantly improved performance and ease-of-use.","extends":["Map"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","returns":[[["Array"]]],"meta":{"line":56,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","params":[{"name":"amount","description":"Amount of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":67,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","params":[{"name":"amount","description":"Amount of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":83,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","params":[{"name":"amount","description":"Amount of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative"},"meta":{"line":100,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","params":[{"name":"amount","description":"Amount of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative"},"meta":{"line":115,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","params":[{"name":"amount","description":"Amount of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single value if no amount is provided or an array of values"},"meta":{"line":129,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","params":[{"name":"amount","description":"Amount of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"A single key if no amount is provided or an array"},"meta":{"line":145,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":164,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in swiftly.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":189,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":220,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value.\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}","if (collection.exists(user => user.username === 'Bob')) {\n console.log('user here!');\n}"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":266,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":298,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":328,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":344,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":368,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":378,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":390,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":405,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":423,"file":"Collection.js","path":"src/util"}}],"meta":{"line":6,"file":"Collection.js","path":"src/util"}},{"name":"DataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them.","access":"private","methods":[{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","scope":"static","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":29,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","scope":"static","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":[[["Promise","<?"],["string",">"]]],"meta":{"line":41,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image.","scope":"static","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":62,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer.","scope":"static","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":85,"file":"DataResolver.js","path":"src/util"}}],"meta":{"line":12,"file":"DataResolver.js","path":"src/util"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","construct":{"name":"Permissions","params":[{"name":"permissions","description":"Permission(s) to read from","type":[[["PermissionResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed permissions","type":[[["number"]]],"meta":{"line":17,"file":"Permissions.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric permission flags. All available properties:\n* `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n* `CREATE_INSTANT_INVITE` (create invitations to the guild)\n* `KICK_MEMBERS`\n* `BAN_MEMBERS`\n* `MANAGE_CHANNELS` (edit and reorder channels)\n* `MANAGE_GUILD` (edit the guild information, region, etc.)\n* `ADD_REACTIONS` (add new reactions to messages)\n* `VIEW_AUDIT_LOG`\n* `VIEW_CHANNEL`\n* `SEND_MESSAGES`\n* `SEND_TTS_MESSAGES`\n* `MANAGE_MESSAGES` (delete messages and reactions)\n* `EMBED_LINKS` (links posted will have a preview embedded)\n* `ATTACH_FILES`\n* `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n* `MENTION_EVERYONE`\n* `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n* `CONNECT` (connect to a voice channel)\n* `SPEAK` (speak in a voice channel)\n* `MUTE_MEMBERS` (mute members across all voice channels)\n* `DEAFEN_MEMBERS` (deafen members across all voice channels)\n* `MOVE_MEMBERS` (move members between voice channels)\n* `USE_VAD` (use voice activity detection)\n* `CHANGE_NICKNAME`\n* `MANAGE_NICKNAMES` (change other members' nicknames)\n* `MANAGE_ROLES`\n* `MANAGE_WEBHOOKS`\n* `MANAGE_EMOJIS`","see":["{@link https://discordapp.com/developers/docs/topics/permissions}"],"scope":"static","type":[[["Object"]]],"meta":{"line":166,"file":"Permissions.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing every permission combined","scope":"static","type":[[["number"]]],"meta":{"line":204,"file":"Permissions.js","path":"src/util"}},{"name":"DEFAULT","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["number"]]],"meta":{"line":210,"file":"Permissions.js","path":"src/util"}}],"methods":[{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"Permissions.js","path":"src/util"}},{"name":"missing","description":"Gets all given permissions that are missing from the bitfield.","params":[{"name":"permissions","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":39,"file":"Permissions.js","path":"src/util"}},{"name":"freeze","description":"Freezes these permissions, making them immutable.","returns":{"types":[[["Permissions"]]],"description":"These permissions"},"meta":{"line":48,"file":"Permissions.js","path":"src/util"}},{"name":"add","description":"Adds permissions to these ones.","params":[{"name":"permissions","description":"Permissions to add","variable":true,"type":[[["PermissionResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"description":"These permissions or new permissions if the instance is frozen."},"meta":{"line":57,"file":"Permissions.js","path":"src/util"}},{"name":"remove","description":"Removes permissions from these.","params":[{"name":"permissions","description":"Permissions to remove","variable":true,"type":[[["PermissionResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"description":"These permissions or new permissions if the instance is frozen."},"meta":{"line":73,"file":"Permissions.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping permission name (like `VIEW_CHANNEL`) to a {@link boolean} indicating whether the\npermission is available.","params":[{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Object"]]],"meta":{"line":90,"file":"Permissions.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of permission names (such as `VIEW_CHANNEL`) based on the permissions available.","params":[{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":101,"file":"Permissions.js","path":"src/util"}},{"name":"resolve","description":"Resolves permissions to their numeric form.","scope":"static","params":[{"name":"permission","description":"Permission(s) to resolve","type":[[["PermissionResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":124,"file":"Permissions.js","path":"src/util"}}],"meta":{"line":8,"file":"Permissions.js","path":"src/util"}},{"name":"SnowflakeUtil","description":"A container for useful snowflake-related methods.","methods":[{"name":"generate","description":"Generates a Discord snowflake.\n<info>This hardcodes the worker ID as 1 and the process ID as 0.</info>","scope":"static","returns":{"types":[[["Snowflake"]]],"description":"The generated snowflake"},"meta":{"line":32,"file":"Snowflake.js","path":"src/util"}},{"name":"deconstruct","description":"Deconstructs a Discord snowflake.","scope":"static","params":[{"name":"snowflake","description":"Snowflake to deconstruct","type":[[["Snowflake"]]]}],"returns":{"types":[[["DeconstructedSnowflake"]]],"description":"Deconstructed snowflake"},"meta":{"line":55,"file":"Snowflake.js","path":"src/util"}}],"meta":{"line":10,"file":"Snowflake.js","path":"src/util"}},{"name":"Structures","description":"Allows for the extension of built-in swiftly.js structures that are instantiated by {@link DataStore DataStores}.","methods":[{"name":"get","description":"Retrieves a structure class.","scope":"static","params":[{"name":"structure","description":"Name of the structure to retrieve","type":[[["string"]]]}],"returns":[[["function"]]],"meta":{"line":14,"file":"Structures.js","path":"src/util"}},{"name":"extend","description":"Extends a structure.","scope":"static","examples":["const { Structures } = require('swiftly.js');\n\nStructures.extend('Guild', Guild => {\n  class CoolGuild extends Guild {\n    constructor(client, data) {\n      super(client, data);\n      this.cool = true;\n    }\n  }\n\n  return CoolGuild;\n});"],"params":[{"name":"structure","description":"Name of the structure class to extend","type":[[["string"]]]},{"name":"extender","description":"Function that takes the base class to extend as its only parameter and returns the\nextended class/prototype","type":[[["function"]]]}],"returns":{"types":[[["function"]]],"description":"Extended class/prototype returned from the extender"},"meta":{"line":39,"file":"Structures.js","path":"src/util"}}],"meta":{"line":4,"file":"Structures.js","path":"src/util"}},{"name":"Util","description":"Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.","methods":[{"name":"splitMessage","description":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","scope":"static","params":[{"name":"text","description":"Content to split","type":[[["string"]]]},{"name":"options","description":"Options controlling the behaviour of the split","optional":true,"type":[[["SplitOptions"]]]}],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":21,"file":"Util.js","path":"src/util"}},{"name":"escapeMarkdown","description":"Escapes any Discord-flavour markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]},{"name":"onlyCodeBlock","description":"Whether to only escape codeblocks (takes priority)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"onlyInlineCode","description":"Whether to only escape inline code","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":45,"file":"Util.js","path":"src/util"}},{"name":"fetchRecommendedShards","description":"Gets the recommended shard count from Discord.","scope":"static","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"guildsPerShard","description":"Number of guilds per shard","optional":true,"default":1000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"},"meta":{"line":57,"file":"Util.js","path":"src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n* A UTF-8 emoji (no ID)\n* A URL-encoded UTF-8 emoji (no ID)\n* A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"static","access":"private","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"description":"Object with `animated`, `name`, and `id` properties"},"meta":{"line":78,"file":"Util.js","path":"src/util"}},{"name":"arraysEqual","description":"Checks whether the arrays are equal, also removes duplicated entries from b.","scope":"static","access":"private","params":[{"name":"a","description":"Array which will not be modified.","type":[[["Array","<"],["*",">"]]]},{"name":"b","description":"Array to remove duplicated entries from.","type":[[["Array","<"],["*",">"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the arrays are equal."},"meta":{"line":93,"file":"Util.js","path":"src/util"}},{"name":"cloneObject","description":"Shallow-copies an object with its class/prototype intact.","scope":"static","access":"private","params":[{"name":"obj","description":"Object to clone","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":111,"file":"Util.js","path":"src/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":122,"file":"Util.js","path":"src/util"}},{"name":"convertToBuffer","description":"Converts an ArrayBuffer or string to a Buffer.","scope":"static","access":"private","params":[{"name":"ab","description":"ArrayBuffer to convert","type":[[["ArrayBuffer"]],[["string"]]]}],"returns":[[["Buffer"]]],"meta":{"line":141,"file":"Util.js","path":"src/util"}},{"name":"str2ab","description":"Converts a string to an ArrayBuffer.","scope":"static","access":"private","params":[{"name":"str","description":"String to convert","type":[[["string"]]]}],"returns":[[["ArrayBuffer"]]],"meta":{"line":152,"file":"Util.js","path":"src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"static","access":"private","params":[{"name":"obj","description":"Error info","type":[[["Object"]]]},{"name":"obj.name","description":"Error type","type":[[["string"]]]},{"name":"obj.message","description":"Message for the error","type":[[["string"]]]},{"name":"obj.stack","description":"Stack for the error","type":[[["string"]]]}],"returns":[[["Error"]]],"meta":{"line":168,"file":"Util.js","path":"src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"static","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[["Object"]]],"meta":{"line":181,"file":"Util.js","path":"src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"static","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<"],["*",">"]]]},{"name":"element","description":"Element to move","type":[["*"]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["number"]]],"meta":{"line":198,"file":"Util.js","path":"src/util"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string.","scope":"static","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":221,"file":"Util.js","path":"src/util"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"static","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":263,"file":"Util.js","path":"src/util"}},{"name":"discordSort","description":"Sorts by Discord's position and ID.","scope":"static","params":[{"name":"collection","description":"Collection of objects to sort","type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":282,"file":"Util.js","path":"src/util"}},{"name":"setPosition","description":"Sets the position of a Channel or Role.","scope":"static","access":"private","params":[{"name":"item","description":"Object to set the position of","type":[[["Channel"]],[["Role"]]]},{"name":"position","description":"New position for the object","type":[[["number"]]]},{"name":"relative","description":"Whether `position` is relative to its current position","type":[[["boolean"]]]},{"name":"sorted","description":"A collection of the objects sorted properly","type":[[["Collection","<"],["string",", ("],["Channel","|"],["Role",")>"]]]},{"name":"route","description":"Route to call PATCH on","type":[[["APIRouter"]]]},{"name":"reason","description":"Reason for the change","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["Object",">>"]]],"description":"Updated item list, with `id` and `position` properties"},"meta":{"line":301,"file":"Util.js","path":"src/util"}},{"name":"basename","description":"Alternative to Node's `path.basename` that we have for some (probably stupid) reason.","scope":"static","access":"private","params":[{"name":"path","description":"Path to get the basename of","type":[[["string"]]]},{"name":"ext","description":"File extension to remove","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Basename of the path"},"meta":{"line":315,"file":"Util.js","path":"src/util"}},{"name":"idToBinary","description":"Transforms a snowflake from a decimal string to a bit string.","scope":"static","access":"private","params":[{"name":"num","description":"Snowflake to be transformed","type":[[["Snowflake"]]]}],"returns":[[["string"]]],"meta":{"line":327,"file":"Util.js","path":"src/util"}},{"name":"binaryToID","description":"Transforms a snowflake from a bit string to a decimal string.","scope":"static","access":"private","params":[{"name":"num","description":"Bit string to be transformed","type":[[["string"]]]}],"returns":[[["Snowflake"]]],"meta":{"line":348,"file":"Util.js","path":"src/util"}},{"name":"delayFor","description":"Creates a Promise that resolves after a specified duration.","scope":"static","access":"private","params":[{"name":"ms","description":"How long to wait before resolving (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":374,"file":"Util.js","path":"src/util"}}],"meta":{"line":10,"file":"Util.js","path":"src/util"}}],"interfaces":[{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":29,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":177,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":186,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"methods":[{"name":"send","description":"Sends a message to this channel.","examples":["// Sends a message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","examples":["channel.search({\n  content: 'swiftly.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.results[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.total}`);\n}).catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":101,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":116,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":160,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":203,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":227,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.\n<warn>This is only available when using a bot account.</warn>","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":253,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":290,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":11,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"typedefs":[{"name":"ReceiveStreamOptions","description":"Options passed to `VoiceReceiver#createStream`.","type":[[["Object"]]],"props":[{"name":"mode","description":"The mode for audio output. This defaults to opus, meaning swiftly.js won't decode\nthe packets for you. You can set this to 'pcm' so that the stream's output will be 16-bit little-endian stereo\naudio","optional":true,"default":"'opus'","type":[[["string"]]]}],"meta":{"line":26,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"type","description":"The type of stream.","optional":true,"default":"'unknown'","type":[[["StreamType"]]]},{"name":"seek","description":"The time to seek to","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at. Set this to false to disable volume transforms for\nthis stream to improve performance.","optional":true,"default":1,"type":[[["number"]],[["boolean"]]]},{"name":"passes","description":"How many times to send the voice packet to reduce packet loss","optional":true,"default":1,"type":[[["number"]]]},{"name":"plp","description":"Expected packet loss percentage","optional":true,"type":[[["number"]]]},{"name":"fec","description":"Enabled forward error correction","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate (quality) of the audio in kbps.\nIf set to 'auto', the voice channel's bitrate will be used","optional":true,"default":96,"type":[[["number"]],[["string"]]]},{"name":"highWaterMark","description":"The maximum number of opus packets to make and store before they are\nactually needed. See https://nodejs.org/en/docs/guides/backpressuring-in-streams/. Setting this value to\n1 means that changes in volume will be more instant.","optional":true,"default":12,"type":[[["number"]]]}],"meta":{"line":4,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"StreamType","description":"An option passed as part of `StreamOptions` specifying the type of the stream.\n* `unknown`: The default type, streams/input will be passed through to ffmpeg before encoding.\nWill play most streams.\n* `converted`: Play a stream of 16bit signed stereo PCM data, skipping ffmpeg.\n* `opus`: Play a stream of opus packets, skipping ffmpeg. You lose the ability to alter volume.\n* `ogg/opus`: Play an ogg file with the opus encoding, skipping ffmpeg. You lose the ability to alter volume.\n* `webm/opus`: Play a webm file with opus audio, skipping ffmpeg. You lose the ability to alter volume.","type":[[["string"]]],"meta":{"line":21,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel object. This can be:\n* A Channel object\n* A Snowflake","type":[[["Channel"]],[["Snowflake"]]],"meta":{"line":75,"file":"ChannelStore.js","path":"src/stores"}},{"name":"ChannelCreationOverwrites","description":"Can be used to overwrite permissions when creating a channel.","type":[[["Object"]]],"props":[{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]],[["number"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]],[["number"]]]},{"name":"id","description":"ID of the role or member this overwrite is for","type":[[["RoleResolvable"]],[["UserResolvable"]]]}],"meta":{"line":25,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"GuildChannelResolvable","description":"Data that can be resolved to give a Guild Channel object. This can be:\n* A GuildChannel object\n* A Snowflake","type":[[["GuildChannel"]],[["Snowflake"]]],"meta":{"line":92,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"EmojiResolvable","description":"Data that can be resolved into an GuildEmoji object. This can be:\n* A custom emoji ID\n* A GuildEmoji object\n* A ReactionEmoji object","type":[[["Snowflake"]],[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":62,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"EmojiIdentifierResolvable","description":"Data that can be resolved to give an emoji identifier. This can be:\n* The unicode representation of an emoji\n* An EmojiResolveable","type":[[["string"]],[["EmojiResolvable"]]],"meta":{"line":90,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\n* A GuildMember object\n* A User resolvable","type":[[["GuildMember"]],[["UserResolvable"]]],"meta":{"line":21,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMemberOptions","description":"Options used to fetch a single member from a guild.","type":[[["Object"]]],"props":[{"name":"user","description":"The user to fetch","type":[[["UserResolvable"]]]},{"name":"cache","description":"Whether or not to cache the fetched member","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":53,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMembersOptions","description":"Options used to fetch multiple members from a guild.","type":[[["Object"]]],"props":[{"name":"query","description":"Limit fetch to members with similar usernames","optional":true,"default":"''","type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to request","optional":true,"default":0,"type":[[["number"]]]}],"meta":{"line":60,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\n* A Guild object\n* A Snowflake","type":[[["Guild"]],[["Snowflake"]]],"meta":{"line":15,"file":"GuildStore.js","path":"src/stores"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":27,"file":"MessageStore.js","path":"src/stores"}},{"name":"MessageResolvable","description":"Data that can be resolved to a Message object. This can be:\n* A Message\n* A Snowflake","type":[[["Message"]],[["Snowflake"]]],"meta":{"line":93,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceResolvable","description":"Data that can be resolved to a Presence object. This can be:\n* A Presence\n* A UserResolvable\n* A Snowflake","type":[[["Presence"]],[["UserResolvable"]],[["Snowflake"]]],"meta":{"line":18,"file":"PresenceStore.js","path":"src/stores"}},{"name":"MessageReactionResolvable","description":"Data that can be resolved to a MessageReaction object. This can be:\n* A MessageReaction\n* A Snowflake","type":[[["MessageReaction"]],[["Snowflake"]]],"meta":{"line":18,"file":"ReactionStore.js","path":"src/stores"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n* A Role\n* A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":56,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n* A User object\n* A Snowflake\n* A Message object (resolves to the message author)\n* A GuildMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]],"meta":{"line":15,"file":"UserStore.js","path":"src/stores"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatus"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"activity","description":"Activity the user is playing","optional":true,"type":[[["Object"]]]},{"name":"activity.application","description":"An application object or application id","optional":true,"type":[[["Object"]],[["string"]]]},{"name":"activity.application.id","description":"The id of the application","optional":true,"type":[[["string"]]]},{"name":"activity.name","description":"Name of the activity","optional":true,"type":[[["string"]]]},{"name":"activity.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"activity.url","description":"Stream url","optional":true,"type":[[["string"]]]}],"meta":{"line":185,"file":"ClientUser.js","path":"src/structures"}},{"name":"PresenceStatus","description":"A user's status. Must be one of:\n* `online`\n* `idle`\n* `invisible`\n* `dnd` (do not disturb)","type":[[["string"]]],"meta":{"line":207,"file":"ClientUser.js","path":"src/structures"}},{"name":"GroupDMRecipientOptions","description":"An object containing either a user or access token, and an optional nickname.","type":[[["Object"]]],"props":[{"name":"user","description":"User to add to the Group DM","optional":true,"type":[[["UserResolvable"]]]},{"name":"accessToken","description":"Access token to use to add a user to the Group DM\n(only available if a bot is creating the DM)","optional":true,"type":[[["string"]]]},{"name":"nick","description":"Permanent nickname (only available if a bot is creating the DM)","optional":true,"type":[[["string"]]]},{"name":"id","description":"If no user resolvable is provided and you want to assign nicknames\nyou must provide user ids instead","optional":true,"type":[[["string"]]]}],"meta":{"line":267,"file":"ClientUser.js","path":"src/structures"}},{"name":"Features","description":"An array of enabled guild features, here are the possible values:\n* INVITE_SPLASH\n* MORE_EMOJI\n* VERIFIED\n* VIP_REGIONS\n* VANITY_URL","type":[[["string"]]],"meta":{"line":114,"file":"Guild.js","path":"src/structures"}},{"name":"BanInfo","description":"An object containing information about a guild member's ban.","type":[[["Object"]]],"props":[{"name":"user","description":"User that was banned","type":[[["User"]]]},{"name":"reason","description":"Reason the user was banned","nullable":true,"type":[[["string"]]]}],"meta":{"line":442,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEditData","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"region","description":"The region of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"type":[[["number"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"type":[[["number"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["GuildMemberResolvable"]]]},{"name":"splash","description":"The splash screen of the guild","optional":true,"type":[[["Base64Resolvable"]]]}],"meta":{"line":587,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["ChannelResolvable"]]]},{"name":"position","description":"New position for the channel","type":[[["number"]]]}],"meta":{"line":832,"file":"Guild.js","path":"src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry, e.g. `GUILD`. Here are the available types:\n* GUILD\n* CHANNEL\n* USER\n* ROLE\n* INVITE\n* WEBHOOK\n* EMOJI\n* MESSAGE","type":[[["string"]]],"meta":{"line":5,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogAction","description":"The action of an entry. Here are the available actions:\n* ALL: null\n* GUILD_UPDATE: 1\n* CHANNEL_CREATE: 10\n* CHANNEL_UPDATE: 11\n* CHANNEL_DELETE: 12\n* CHANNEL_OVERWRITE_CREATE: 13\n* CHANNEL_OVERWRITE_UPDATE: 14\n* CHANNEL_OVERWRITE_DELETE: 15\n* MEMBER_KICK: 20\n* MEMBER_PRUNE: 21\n* MEMBER_BAN_ADD: 22\n* MEMBER_BAN_REMOVE: 23\n* MEMBER_UPDATE: 24\n* MEMBER_ROLE_UPDATE: 25\n* ROLE_CREATE: 30\n* ROLE_UPDATE: 31\n* ROLE_DELETE: 32\n* INVITE_CREATE: 40\n* INVITE_UPDATE: 41\n* INVITE_DELETE: 42\n* WEBHOOK_CREATE: 50\n* WEBHOOK_UPDATE: 51\n* WEBHOOK_DELETE: 50\n* EMOJI_CREATE: 60\n* EMOJI_UPDATE: 61\n* EMOJI_DELETE: 62\n* MESSAGE_DELETE: 72","type":[[["number"]],[["string"]]],"meta":{"line":36,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of an entry. It can be one of:\n* A guild\n* A user\n* A role\n* An emoji\n* An invite\n* A webhook\n* An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["User"]],[["Role"]],[["GuildEmoji"]],[["Invite"]],[["Webhook"]]],"meta":{"line":142,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry, e.g. `CREATE`. Here are the available types:\n* CREATE\n* DELETE\n* UPDATE\n* ALL","type":[[["string"]]],"meta":{"line":171,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[["*"]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[["*"]]}],"meta":{"line":261,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled), `null` (default) or `false` (disabled).\n```js\n{\n 'SEND_MESSAGES': true,\n 'EMBED_LINKS': null,\n 'ATTACH_FILES': false,\n}\n```","type":[[["Object"]]],"meta":{"line":179,"file":"GuildChannel.js","path":"src/structures"}},{"name":"ChannelData","description":"The data for a guild channel.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the voice channel","optional":true,"type":[[["number"]]]},{"name":"parentID","description":"The parent ID of the channel","optional":true,"type":[[["Snowflake"]]]},{"name":"lockPermissions","description":"Lock the permissions of the channel to what the parent's permissions are","optional":true,"type":[[["boolean"]]]},{"name":"permissionOverwrites","description":"An array of overwrites to set for the channel","optional":true,"type":[[["Array","<"],["OverwriteData",">"]]]}],"meta":{"line":276,"file":"GuildChannel.js","path":"src/structures"}},{"name":"OverwriteData","description":"The data for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the overwrite","type":[[["string"]]]},{"name":"type","description":"The type of the overwrite, either role or member","type":[[["string"]]]},{"name":"allow","description":"The bitfield for the allowed permissions","type":[[["number"]]]},{"name":"deny","description":"The bitfield for the denied permissions","type":[[["number"]]]}],"meta":{"line":290,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmojiEditData","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"meta":{"line":72,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMemberEditData","description":"The data for editing a guild member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role IDs to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move member to (if they are connected to voice)","optional":true,"type":[[["ChannelResolvable"]]]}],"meta":{"line":326,"file":"GuildMember.js","path":"src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"meta":{"line":4,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to dispose data when it's deleted","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":12,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"MessageOptions","description":"Options provided when sending or editing a message.","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embed","description":"An embed for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["MessageEmbed"]],[["Object"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]},{"name":"reply","description":"User to reply to (prefixes the message with a mention, except in DMs)","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":32,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"FileOptions","type":[[["Object"]]],"props":[{"name":"attachment","description":"File to attach","type":[[["BufferResolvable"]]]},{"name":"name","description":"Filename of the attachment","optional":true,"default":"'file.jpg'","type":[[["string"]]]}],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"SplitOptions","description":"Options for splitting a message.","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":1950,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":55,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":207,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":285,"file":"Message.js","path":"src/structures"}},{"name":"MessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["Object"]]],"props":[{"name":"content","description":"Content to be edited","optional":true,"type":[[["string"]]]},{"name":"embed","description":"An embed to be added/edited","optional":true,"type":[[["Object"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]}],"meta":{"line":356,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to collect","type":[[["number"]]]},{"name":"maxProcessed","description":"The maximum amount of messages to process","type":[[["number"]]]}],"meta":{"line":4,"file":"MessageCollector.js","path":"src/structures"}},{"name":"OverwriteType","description":"The type of a permission overwrite. It can be one of:\n* member\n* role","type":[[["string"]]],"meta":{"line":26,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":5,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":146,"file":"Role.js","path":"src/structures"}},{"name":"MessageSearchOptions","type":[[["Object"]]],"props":[{"name":"content","description":"Message content","optional":true,"type":[[["string"]]]},{"name":"maxID","description":"Maximum ID for the filter","optional":true,"type":[[["Snowflake"]]]},{"name":"minID","description":"Minimum ID for the filter","optional":true,"type":[[["Snowflake"]]]},{"name":"has","description":"One of `link`, `embed`, `file`, `video`, `image`, or `sound`,\nor add `-` to negate (e.g. `-file`)","optional":true,"type":[[["string"]]]},{"name":"channel","description":"Channel to limit search to (only for guild search endpoint)","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"author","description":"Author to limit search","optional":true,"type":[[["UserResolvable"]]]},{"name":"authorType","description":"One of `user`, `bot`, `webhook`, or add `-` to negate (e.g. `-webhook`)","optional":true,"type":[[["string"]]]},{"name":"sortBy","description":"`timestamp` or `relevant`","optional":true,"default":"'timestamp'","type":[[["string"]]]},{"name":"sortOrder","description":"`ascending` or `descending`","optional":true,"default":"'descending'","type":[[["string"]]]},{"name":"contextSize","description":"How many messages to get around the matched message (0 to 2)","optional":true,"default":2,"type":[[["number"]]]},{"name":"limit","description":"Maximum number of results to get (1 to 25)","optional":true,"default":25,"type":[[["number"]]]},{"name":"offset","description":"Offset the \"pages\" of results (since you can only see 25 at a time)","optional":true,"default":0,"type":[[["number"]]]},{"name":"mentions","description":"Mentioned user filter","optional":true,"type":[[["UserResolvable"]]]},{"name":"mentionsEveryone","description":"If everyone is mentioned","optional":true,"type":[[["boolean"]]]},{"name":"linkHostname","description":"Filter links by hostname","optional":true,"type":[[["string"]]]},{"name":"embedProvider","description":"The name of an embed provider","optional":true,"type":[[["string"]]]},{"name":"embedType","description":"one of `image`, `video`, `url`, `rich`, or add `-` to negate (e.g. `-image`)","optional":true,"type":[[["string"]]]},{"name":"attachmentFilename","description":"The name of an attachment","optional":true,"type":[[["string"]]]},{"name":"attachmentExtension","description":"The extension of an attachment","optional":true,"type":[[["string"]]]},{"name":"before","description":"Date to find messages before","optional":true,"type":[[["Date"]]]},{"name":"after","description":"Date to find messages before","optional":true,"type":[[["Date"]]]},{"name":"during","description":"Date to find messages during (range of date to date + 24 hours)","optional":true,"type":[[["Date"]]]},{"name":"nsfw","description":"Include results from NSFW channels","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":4,"file":"Search.js","path":"src/structures/shared"}},{"name":"MessageSearchResult","type":[[["Object"]]],"props":[{"name":"total","description":"Total result count","type":[[["number"]]]},{"name":"results","description":"Array of message results\nThe message which has triggered the result will have the `hit` property set to `true`","type":[[["Array","<"],["Array","<"],["Message",">>"]]]}],"meta":{"line":32,"file":"Search.js","path":"src/structures/shared"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into send.","type":[[["Object"]]],"props":[{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embeds","description":"An array of embeds for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["Array","<"],["Object",">"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":67,"file":"Webhook.js","path":"src/structures"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"apiRequestMethod","description":"One of `sequential` or `burst`. The sequential handler executes\nall requests in the order they are triggered, whereas the burst handler runs multiple in parallel, and doesn't\nprovide the guarantee of any particular order. Burst mode is more likely to hit a 429 ratelimit error by its nature,\nand is therefore slightly riskier to use.","optional":true,"default":"'sequential'","type":[[["string"]]]},{"name":"shardId","description":"ID of the shard to run","optional":true,"default":0,"type":[[["number"]]]},{"name":"shardCount","description":"Total number of shards","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\n(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\nindefinitely)","optional":true,"default":200,"type":[[["number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\nsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\nthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\nupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for {@link MessageOptions#disableEveryone}","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"sync","description":"Whether to periodically sync guilds (for user accounts)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\ncorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"restTimeOffset","description":"Extra time in millseconds to wait before continuing to make REST\nrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\nprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\n100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\nmost impact is typically `TYPING_START`.","optional":true,"type":[[["Array","<"],["WSEventType",">"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":5,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection\n(defaults to `false` for browsers)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":51,"file":"Constants.js","path":"src/util"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["number"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'https://discordapp.com/api'","type":[[["string"]]]},{"name":"cdn","description":"Base url of the CDN","optional":true,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"invite","description":"Base url of invites","optional":true,"default":"'https://discord.gg'","type":[[["string"]]]}],"meta":{"line":69,"file":"Constants.js","path":"src/util"}},{"name":"Status","description":"The current status of the client. Here are the available statuses:\n* READY: 0\n* CONNECTING: 1\n* RECONNECTING: 2\n* IDLE: 3\n* NEARLY: 4\n* DISCONNECTED: 5","type":[[["number"]]],"meta":{"line":137,"file":"Constants.js","path":"src/util"}},{"name":"VoiceStatus","description":"The current status of a voice connection. Here are the available statuses:\n* CONNECTED: 0\n* CONNECTING: 1\n* AUTHENTICATING: 2\n* RECONNECTING: 3\n* DISCONNECTED: 4","type":[[["number"]]],"meta":{"line":156,"file":"Constants.js","path":"src/util"}},{"name":"WSEventType","description":"The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n* READY\n* RESUMED\n* GUILD_SYNC\n* GUILD_CREATE\n* GUILD_DELETE\n* GUILD_UPDATE\n* GUILD_MEMBER_ADD\n* GUILD_MEMBER_REMOVE\n* GUILD_MEMBER_UPDATE\n* GUILD_MEMBERS_CHUNK\n* GUILD_ROLE_CREATE\n* GUILD_ROLE_DELETE\n* GUILD_ROLE_UPDATE\n* GUILD_BAN_ADD\n* GUILD_BAN_REMOVE\n* CHANNEL_CREATE\n* CHANNEL_DELETE\n* CHANNEL_UPDATE\n* CHANNEL_PINS_UPDATE\n* MESSAGE_CREATE\n* MESSAGE_DELETE\n* MESSAGE_UPDATE\n* MESSAGE_DELETE_BULK\n* MESSAGE_REACTION_ADD\n* MESSAGE_REACTION_REMOVE\n* MESSAGE_REACTION_REMOVE_ALL\n* USER_UPDATE\n* USER_NOTE_UPDATE\n* USER_SETTINGS_UPDATE\n* PRESENCE_UPDATE\n* VOICE_STATE_UPDATE\n* TYPING_START\n* VOICE_SERVER_UPDATE\n* RELATIONSHIP_ADD\n* RELATIONSHIP_REMOVE","type":[[["string"]]],"meta":{"line":248,"file":"Constants.js","path":"src/util"}},{"name":"MessageType","description":"The type of a message, e.g. `DEFAULT`. Here are the available types:\n* DEFAULT\n* RECIPIENT_ADD\n* RECIPIENT_REMOVE\n* CALL\n* CHANNEL_NAME_CHANGE\n* CHANNEL_ICON_CHANGE\n* PINS_ADD\n* GUILD_MEMBER_JOIN","type":[[["string"]]],"meta":{"line":327,"file":"Constants.js","path":"src/util"}},{"name":"ActivityType","description":"The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n* PLAYING\n* STREAMING\n* LISTENING\n* WATCHING","type":[[["string"]]],"meta":{"line":350,"file":"Constants.js","path":"src/util"}},{"name":"UserFlags","description":"All flags users can have:\n* STAFF\n* PARTNER\n* HYPESQUAD","type":[[["string"]]],"meta":{"line":565,"file":"Constants.js","path":"src/util"}},{"name":"APIError","description":"An error encountered while performing an API request. Here are the potential errors:\n* UNKNOWN_ACCOUNT\n* UNKNOWN_APPLICATION\n* UNKNOWN_CHANNEL\n* UNKNOWN_GUILD\n* UNKNOWN_INTEGRATION\n* UNKNOWN_INVITE\n* UNKNOWN_MEMBER\n* UNKNOWN_MESSAGE\n* UNKNOWN_OVERWRITE\n* UNKNOWN_PROVIDER\n* UNKNOWN_ROLE\n* UNKNOWN_TOKEN\n* UNKNOWN_USER\n* UNKNOWN_EMOJI\n* BOT_PROHIBITED_ENDPOINT\n* BOT_ONLY_ENDPOINT\n* MAXIMUM_GUILDS\n* MAXIMUM_FRIENDS\n* MAXIMUM_PINS\n* MAXIMUM_ROLES\n* MAXIMUM_REACTIONS\n* UNAUTHORIZED\n* MISSING_ACCESS\n* INVALID_ACCOUNT_TYPE\n* CANNOT_EXECUTE_ON_DM\n* EMBED_DISABLED\n* CANNOT_EDIT_MESSAGE_BY_OTHER\n* CANNOT_SEND_EMPTY_MESSAGE\n* CANNOT_MESSAGE_USER\n* CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n* CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n* OAUTH2_APPLICATION_BOT_ABSENT\n* MAXIMUM_OAUTH2_APPLICATIONS\n* INVALID_OAUTH_STATE\n* MISSING_PERMISSIONS\n* INVALID_AUTHENTICATION_TOKEN\n* NOTE_TOO_LONG\n* INVALID_BULK_DELETE_QUANTITY\n* CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n* CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n* BULK_DELETE_MESSAGE_TOO_OLD\n* INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n* REACTION_BLOCKED","type":[[["string"]]],"meta":{"line":619,"file":"Constants.js","path":"src/util"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n* An invite code\n* An invite URL","type":[[["string"]]],"meta":{"line":17,"file":"DataResolver.js","path":"src/util"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n* A Buffer\n* A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":50,"file":"DataResolver.js","path":"src/util"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n* A Buffer\n* The path to a local file\n* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":67,"file":"DataResolver.js","path":"src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Permissions.FLAGS})\n* A permission number\n* An instance of Permissions\n* An Array of PermissionResolvable","type":[[["string"]],[["number"]],[["Permissions"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":110,"file":"Permissions.js","path":"src/util"}},{"name":"Snowflake","description":"A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n```\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":15,"file":"Snowflake.js","path":"src/util"}},{"name":"DeconstructedSnowflake","description":"A deconstructed snowflake.","type":[[["Object"]]],"props":[{"name":"timestamp","description":"Timestamp the snowflake was created","type":[[["number"]]]},{"name":"date","description":"Date the snowflake was created","type":[[["Date"]]]},{"name":"workerID","description":"Worker ID in the snowflake","type":[[["number"]]]},{"name":"processID","description":"Process ID in the snowflake","type":[[["number"]]]},{"name":"increment","description":"Increment in the snowflake","type":[[["number"]]]},{"name":"binary","description":"Binary representation of the snowflake","type":[[["string"]]]}],"meta":{"line":39,"file":"Snowflake.js","path":"src/util"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":208,"file":"Util.js","path":"src/util"}},{"name":"ColorResolvable","description":"Can be a number, hex string, an RGB array like:\n```js\n[255, 0, 255] // purple\n```\nor one of the following strings:\n- `DEFAULT`\n- `AQUA`\n- `GREEN`\n- `BLUE`\n- `PURPLE`\n- `GOLD`\n- `ORANGE`\n- `RED`\n- `GREY`\n- `DARKER_GREY`\n- `NAVY`\n- `DARK_AQUA`\n- `DARK_GREEN`\n- `DARK_BLUE`\n- `DARK_PURPLE`\n- `DARK_GOLD`\n- `DARK_ORANGE`\n- `DARK_RED`\n- `DARK_GREY`\n- `LIGHT_GREY`\n- `DARK_NAVY`\n- `RANDOM`","type":[[["string"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":227,"file":"Util.js","path":"src/util"}}],"externals":[{"name":"WritableStream","see":["{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}"],"meta":{"line":14,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"CloseEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}"],"meta":{"line":360,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":75,"file":"DataResolver.js","path":"src/util"}}]}