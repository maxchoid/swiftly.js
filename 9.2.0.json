{"meta":{"generator":"0.6.0","format":19,"date":1482128705950},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<p align=\"center\">\r\n  <a href=\"https://hydrabolt.github.io/swiftly.js\">\r\n    <img alt=\"swiftly.js\" src=\"http://i.imgur.com/sPOLh9y.png\" width=\"546\"><br />\r\n  </a>\r\n</p>\r\n\r\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/Y4yAKBS)\r\n[![npm](https://img.shields.io/npm/v/swiftly.js.svg?maxAge=2592000)](https://www.npmjs.com/package/swiftly.js)\r\n[![npm](https://img.shields.io/npm/dt/swiftly.js.svg?maxAge=2592000)](https://www.npmjs.com/package/swiftly.js)\r\n[![Build Status](https://travis-ci.org/hydrabolt/swiftly.js.svg)](https://travis-ci.org/hydrabolt/swiftly.js)\r\n[![David](https://img.shields.io/david/hydrabolt/swiftly.js.svg?maxAge=2592000)](https://david-dm.org/hydrabolt/swiftly.js)\r\n\r\n[![NPM](https://nodei.co/npm/swiftly.js.png?downloads=true&stars=true)](https://nodei.co/npm/swiftly.js/)\r\n\r\nswiftly.js is a powerful node.js module that allows you to interact with the [Discord API](https://discordapp.com/developers/docs/intro).\r\n\r\n# Welcome!\r\nWelcome to the swiftly.js v9 documentation. The v9 rewrite has taken a lot of time, but it should be much more\r\nstable and performant than previous versions.\r\n\r\n## Installation\r\n**Node.js 6.0.0 or newer is required.**  \r\nWith voice support: `npm install --save swiftly.js --production`  \r\nWithout voice support: `npm install --save swiftly.js --production --no-optional`\r\n\r\nBy default, swiftly.js uses [opusscript](https://www.npmjs.com/package/opusscript) when playing audio over voice connections.\r\nIf you're looking to play over multiple voice connections, it might be better to install [node-opus](https://www.npmjs.com/package/node-opus).\r\nswiftly.js will automatically prefer node-opus over opusscript.\r\n\r\n## Guides\r\n* [LuckyEvie's general guide](https://eslachance.gitbooks.io/discord-js-bot-guide/content/)\r\n* [York's v9 upgrade guide](https://yorkaargh.wordpress.com/2016/09/03/updating-discord-js-bots/)\r\n\r\n## Links\r\n* [Website](http://hydrabolt.github.io/swiftly.js/)\r\n* [swiftly.js Server](https://discord.gg/Y4yAKBS)\r\n* [Discord API Server](https://discord.gg/rV4BwdK)\r\n* [Documentation](http://hydrabolt.github.io/swiftly.js/#!/docs/tag/master)\r\n* [Legacy Documentation](http://iilukas.readthedocs.io/en/8.1.0/docs_client.html)\r\n* [GitHub](https://github.com/hydrabolt/swiftly.js)\r\n* [NPM](https://www.npmjs.com/package/swiftly.js)\r\n* [Examples](https://github.com/hydrabolt/swiftly.js/tree/master/docs/custom/examples)\r\n* [Related Libraries](https://discordapi.com/unofficial/libs.html)\r\n\r\n## Help\r\nIf you don't understand something in this documentation, you are experiencing problems, or you just need a gentle\r\nnudge in the right direction, please don't hesitate to join our official [swiftly.js Server](https://discord.gg/Y4yAKBS).\r\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# About Version 9\r\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\r\nwhich allows your code to be much more readable and manageable.\r\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\r\nolder versions. It also has support for newer Discord Features, such as emojis.\r\n\r\n## Upgrading your code\r\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\r\nmost of the concepts are still the same, but loads of functions have been moved around.\r\nThe vast majority of methods you're used to using have been moved out of the Client class,\r\ninto other more relevant classes where they belong.\r\nBecause of this, you will need to convert most of your calls over to the new methods.\r\n\r\nHere are a few examples of methods that have changed:\r\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\r\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\r\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\r\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\r\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\r\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\r\n\r\nA couple more important details:\r\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\r\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\r\n\r\n## Callbacks\r\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \r\nFor example, the following code:\r\n\r\n```js\r\nclient.getChannelLogs(channel, 100, function(messages) {\r\n  console.log(`${messages.length} messages found`);\r\n});\r\n```\r\n\r\n```js\r\nchannel.fetchMessages({limit: 100}).then(messages => {\r\n  console.log(`${messages.size} messages found`);\r\n});\r\n```\r\n","path":"docs/general/updating.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/*\r\n  A ping pong bot, whenever you send \"ping\", it replies \"pong\".\r\n*/\r\n\r\n// import the swiftly.js module\r\nconst Discord = require('swiftly.js');\r\n\r\n// create an instance of a Discord Client, and call it bot\r\nconst bot = new Discord.Client();\r\n\r\n// the token of your bot - https://discordapp.com/developers/applications/me\r\nconst token = 'your bot token here';\r\n\r\n// the ready event is vital, it means that your bot will only start reacting to information\r\n// from Discord _after_ ready is emitted.\r\nbot.on('ready', () => {\r\n  console.log('I am ready!');\r\n});\r\n\r\n// create an event listener for messages\r\nbot.on('message', message => {\r\n  // if the message is \"ping\",\r\n  if (message.content === 'ping') {\r\n    // send \"pong\" to the same channel.\r\n    message.channel.sendMessage('pong');\r\n  }\r\n});\r\n\r\n// log our bot in\r\nbot.login(token);\r\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/*\r\n  Send a user a link to their avatar\r\n*/\r\n\r\n// import the swiftly.js module\r\nconst Discord = require('swiftly.js');\r\n\r\n// create an instance of a Discord Client, and call it bot\r\nconst bot = new Discord.Client();\r\n\r\n// the token of your bot - https://discordapp.com/developers/applications/me\r\nconst token = 'your bot token here';\r\n\r\n// the ready event is vital, it means that your bot will only start reacting to information\r\n// from Discord _after_ ready is emitted.\r\nbot.on('ready', () => {\r\n  console.log('I am ready!');\r\n});\r\n\r\n// create an event listener for messages\r\nbot.on('message', message => {\r\n  // if the message is \"what is my avatar\",\r\n  if (message.content === 'what is my avatar') {\r\n    // send the user's avatar URL\r\n    message.reply(message.author.avatarURL);\r\n  }\r\n});\r\n\r\n// log our bot in\r\nbot.login(token);\r\n","path":"docs/examples/avatars.js"}}}},"classes":[{"name":"Client","description":"The starting point for making a Discord Bot.","extends":["EventEmitter"],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":34,"file":"Client.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":42,"file":"Client.js","path":"src/client"}},{"name":"dataManager","description":"The data manager of the Client","access":"private","type":[[["ClientDataManager"]]],"meta":{"line":49,"file":"Client.js","path":"src/client"}},{"name":"manager","description":"The manager of the Client","access":"private","type":[[["ClientManager"]]],"meta":{"line":56,"file":"Client.js","path":"src/client"}},{"name":"ws","description":"The WebSocket Manager of the Client","access":"private","type":[[["WebSocketManager"]]],"meta":{"line":63,"file":"Client.js","path":"src/client"}},{"name":"resolver","description":"The Data Resolver of the Client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":70,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The Action Manager of the Client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":77,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The Voice Manager of the Client","access":"private","type":[[["ClientVoiceManager"]]],"meta":{"line":84,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"The shard helpers for the client (only if the process was spawned as a child, such as from a ShardingManager)","nullable":true,"type":[[["ShardUtil"]]],"meta":{"line":90,"file":"Client.js","path":"src/client"}},{"name":"users","description":"A Collection of the Client's stored users","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":96,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"A Collection of the Client's stored guilds","type":[[["Collection",".<"],["string",", "],["Guild",">"]]],"meta":{"line":102,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"A Collection of the Client's stored channels","type":[[["Collection",".<"],["string",", "],["Channel",">"]]],"meta":{"line":108,"file":"Client.js","path":"src/client"}},{"name":"presences","description":"A Collection of presences for friends of the logged in user.\r<warn>This is only present for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["Presence",">"]]],"meta":{"line":115,"file":"Client.js","path":"src/client"}},{"name":"token","description":"The authorization token for the logged in user/bot.","nullable":true,"type":[[["string"]]],"meta":{"line":122,"file":"Client.js","path":"src/client"}},{"name":"email","description":"The email, if there is one, for the logged in Client","nullable":true,"type":[[["string"]]],"meta":{"line":131,"file":"Client.js","path":"src/client"}},{"name":"password","description":"The password, if there is one, for the logged in Client","nullable":true,"type":[[["string"]]],"meta":{"line":137,"file":"Client.js","path":"src/client"}},{"name":"user","description":"The ClientUser representing the logged in Client","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":143,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"The date at which the Client was regarded as being in the `READY` state.","nullable":true,"type":[[["Date"]]],"meta":{"line":149,"file":"Client.js","path":"src/client"}},{"name":"status","description":"The status for the logged in Client.","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":164,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"The uptime for the logged in Client.","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":173,"file":"Client.js","path":"src/client"}},{"name":"voiceConnections","description":"Returns a Collection, mapping Guild ID to Voice Connections.","readonly":true,"type":[[["Collection",".<"],["string",", "],["VoiceConnection",">"]]],"meta":{"line":182,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"The emojis that the client can use. Mapped by emoji ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Emoji",">"]]],"meta":{"line":191,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"The timestamp that the client was last ready at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":204,"file":"Client.js","path":"src/client"}}],"methods":[{"name":"login","description":"Logs the client in. If successful, resolves with the account's token. <warn>If you're making a bot, it's\rmuch better to use a bot account rather than a user account.\rBot accounts have higher rate limits and have access to some features user accounts don't have. User bots\rthat are making a lot of API requests can even be banned.</warn>","examples":["// log the client in using a token\rconst token = 'my token';\rclient.login(token);","// log the client in using email and password\rconst email = 'user@email.com';\rconst password = 'supersecret123';\rclient.login(email, password);"],"params":[{"name":"tokenOrEmail","description":"The token or email used for the account. If it is an email, a password _must_ be\rprovided.","type":[[["string"]]]},{"name":"password","description":"The password for the account, only needed if an email was provided.","optional":true,"default":null,"type":[[["string"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":227,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Destroys the client and logs out.","returns":[[["Promise"]]],"meta":{"line":236,"file":"Client.js","path":"src/client"}},{"name":"syncGuilds","description":"This shouldn't really be necessary to most developers as it is automatically invoked every 30 seconds, however\rif you wish to force a sync of Guild data, you can use this. Only applicable to user accounts.","params":[{"name":"guilds","description":"An array or collection of guilds to sync","optional":true,"default":"this.guilds","type":[[["Array",".<"],["Guild",">"]],[["Collection",".<"],["string",", "],["Guild",">"]]]}],"meta":{"line":252,"file":"Client.js","path":"src/client"}},{"name":"fetchUser","description":"Caches a user, or obtains it from the cache if it's already cached.\rIf the user isn't already cached, it will only be obtainable by OAuth bot accounts.","params":[{"name":"id","description":"The ID of the user to obtain","type":[[["string"]]]}],"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":267,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Fetches an invite object from an invite code.","params":[{"name":"invite","description":"An invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":277,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Fetch a webhook by ID.","params":[{"name":"id","description":"ID of the webhook","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":287,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all channels' messages and removes the ones older than the max message lifetime.\rIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\rwill be removed from the caches. The default is based on the client's `messageCacheLifetime` option.","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\ror -1 if the message cache lifetime is unlimited"},"meta":{"line":299,"file":"Client.js","path":"src/client"}}],"events":[{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["Channel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["Channel"]]]}],"meta":{"line":27,"file":"ChannelUpdate.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable.","type":[[["Guild"]]]}],"meta":{"line":45,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"guildEmojiCreate","description":"Emitted whenever an emoji is created","params":[{"name":"emoji","description":"The emoji that was created.","type":[[["Emoji"]]]}],"meta":{"line":13,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"guildEmojiDelete","description":"Emitted whenever an emoji is deleted","params":[{"name":"emoji","description":"The emoji that was deleted.","type":[[["Emoji"]]]}],"meta":{"line":13,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"guildEmojiUpdate","description":"Emitted whenever an emoji is updated","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["Emoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["Emoji"]]]}],"meta":{"line":23,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild.","type":[[["GuildMember"]]]}],"meta":{"line":43,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created.","type":[[["Role"]]]}],"meta":{"line":26,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted.","type":[[["Role"]]]}],"meta":{"line":40,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update.","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update.","type":[[["Role"]]]}],"meta":{"line":34,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update.","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update.","type":[[["Guild"]]]}],"meta":{"line":27,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update.","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update.","type":[[["Message"]]]}],"meta":{"line":36,"file":"MessageUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings","params":[{"name":"The","description":"warning","type":[[["string"]]]}],"meta":{"line":400,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information","params":[{"name":"The","description":"debug information","type":[[["string"]]]}],"meta":{"line":406,"file":"Client.js","path":"src/client"}},{"name":"guildCreate","description":"Emitted whenever the client joins a Guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":26,"file":"ClientDataManager.js","path":"src/client"}},{"name":"channelCreate","description":"Emitted whenever a Channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["Channel"]]]}],"meta":{"line":11,"file":"ChannelCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelDelete","description":"Emitted whenever a Channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["Channel"]]]}],"meta":{"line":14,"file":"ChannelDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a Channel are updated. Due to the nature of the WebSocket event, not much information\rcan be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occured in","type":[[["Channel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":23,"file":"ChannelPinsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildBanAdd.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":13,"file":"GuildBanRemove.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildDelete","description":"Emitted whenever a Guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of Guild members is received (all members come from the same guild)","params":[{"name":"members","description":"The members in the chunk","type":[[["Array",".<"],["GuildMember",">"]]]}],"meta":{"line":22,"file":"GuildMembersChunk.js","path":"src/client/websocket/packets/handlers"}},{"name":"message","description":"Emitted whenever a message is created","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection",".<"],["string",", "],["Message",">"]]]}],"meta":{"line":11,"file":"MessageDeleteBulk.js","path":"src/client/websocket/packets/handlers"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence changes, or they change one of their details.","params":[{"name":"oldMember","description":"The member before the presence update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the presence update","type":[[["GuildMember"]]]}],"meta":{"line":52,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":59,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberAvailable","description":"Emitted whenever a member becomes available in a large Guild","params":[{"name":"member","description":"The member that became available","type":[[["GuildMember"]]]}],"meta":{"line":66,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":54,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStop","description":"Emitted whenever a user stops typing in a channel","params":[{"name":"channel","description":"The channel the user stopped typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that stopped typing","type":[[["User"]]]}],"meta":{"line":61,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"voiceStateUpdate","description":"Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldMember","description":"The member before the voice state update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the voice state update","type":[[["GuildMember"]]]}],"meta":{"line":42,"file":"VoiceStateUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"disconnect","description":"Emitted whenever the client websocket is disconnected","meta":{"line":196,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"error","description":"Emitted whenever the Client encounters a serious connection error","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":233,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the Client becomes ready to start working","meta":{"line":243,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"Emitted when the Client tries to reconnect after being disconnected","meta":{"line":286,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":726,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberUpdate","description":"Emitted whenever a Guild Member changes - i.e. new role, removed role, nickname","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":748,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberSpeaking","description":"Emitted once a Guild Member starts/stops speaking","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"Whether or not the member is speaking","type":[[["boolean"]]]}],"meta":{"line":772,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":19,"file":"Client.js","path":"src/client"}},{"name":"ClientDataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\rextracting a User from a Message object.","access":"private","construct":{"name":"ClientDataResolver","params":[{"name":"client","description":"The client the resolver is for","type":[[["Client"]]]}]},"methods":[{"name":"resolveUser","description":"Resolves a UserResolvable to a User object","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":40,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveUserID","description":"Resolves a UserResolvable to a user ID string","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":54,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuild","description":"Resolves a GuildResolvable to a Guild object","params":[{"name":"guild","description":"The GuildResolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":73,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuildMember","description":"Resolves a GuildMemberResolvable to a GuildMember object","params":[{"name":"guild","description":"The guild that the member is part of","type":[[["GuildResolvable"]]]},{"name":"user","description":"The user that is part of the guild","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":92,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveChannel","description":"Resolves a ChannelResolvable to a Channel object","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":116,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":136,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolvePermission","description":"Resolves a PermissionResolvable to a permission number","params":[{"name":"permission","description":"The permission resolvable to resolve","type":[[["PermissionResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":186,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":205,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":223,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveFile","description":"Resolves a FileResolvable to a Buffer","params":[{"name":"resource","description":"The file resolvable to resolve","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Buffer",">"]]],"meta":{"line":241,"file":"ClientDataResolver.js","path":"src/client"}}],"meta":{"line":17,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ClientManager","description":"Manages the State and Background Tasks of the Client","access":"private","props":[{"name":"client","description":"The Client that instantiated this Manager","type":[[["Client"]]],"meta":{"line":13,"file":"ClientManager.js","path":"src/client"}},{"name":"heartbeatInterval","description":"The heartbeat interval, null if not yet set","nullable":true,"type":[[["number"]]],"meta":{"line":19,"file":"ClientManager.js","path":"src/client"}}],"methods":[{"name":"connectToWebSocket","description":"Connects the Client to the WebSocket","params":[{"name":"token","description":"The authorization token","type":[[["string"]]]},{"name":"resolve","description":"Function to run when connection is successful","type":[[["function"]]]},{"name":"reject","description":"Function to run when connection fails","type":[[["function"]]]}],"meta":{"line":28,"file":"ClientManager.js","path":"src/client"}},{"name":"setupKeepAlive","description":"Sets up a keep-alive interval to keep the Client's connection valid","params":[{"name":"time","description":"The interval in milliseconds at which heartbeat packets should be sent","type":[[["number"]]]}],"meta":{"line":50,"file":"ClientManager.js","path":"src/client"}}],"meta":{"line":7,"file":"ClientManager.js","path":"src/client"}},{"name":"RequestHandler","description":"A base class for different types of rate limiting handlers for the REST API.","access":"private","construct":{"name":"RequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]}]},"props":[{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed.","type":[[["Array",".<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint.","type":[[["boolean"]]],"meta":{"line":27,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"push","description":"Push a new API request into this bucket","params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":39,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue","meta":{"line":46,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":5,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"SequentialRequestHandler","description":"Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto\rthe next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,\rbut it can be slower.","extends":["RequestHandler"],"access":"private","construct":{"name":"SequentialRequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]},{"name":"endpoint","description":"The endpoint to handle","type":[[["string"]]]}]},"props":[{"name":"waiting","description":"Whether this rate limiter is waiting for a response from a request","type":[[["boolean"]]],"meta":{"line":22,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"endpoint","description":"The endpoint that this handler is handling","type":[[["string"]]],"meta":{"line":28,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"timeDifference","description":"The time difference between Discord's Dates and the local computer's Dates. A positive number means the local\rcomputer's time is ahead of Discord's.","type":[[["number"]]],"meta":{"line":35,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed.","type":[[["Array",".<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint.","type":[[["boolean"]]],"meta":{"line":27,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"execute","description":"Performs a request then resolves a promise to indicate its readiness for a new request","params":[{"name":"item","description":"The item to execute","type":[[["APIRequest"]]]}],"returns":[[["Promise",".<(?"],["Object","|"],["Error",")>"]]],"meta":{"line":48,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"push","description":"Push a new API request into this bucket","inherits":"RequestHandler#push","inherited":true,"params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":39,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue","inherits":"RequestHandler#handle","inherited":true,"meta":{"line":46,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":10,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"ClientVoiceManager","description":"Manages all the voice stuff for the Client","access":"private","props":[{"name":"client","description":"The client that instantiated this voice manager","type":[[["Client"]]],"meta":{"line":17,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection",".<"],["string",", "],["VoiceConnection",">"]]],"meta":{"line":23,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"pending","description":"Pending connection attempts, maps Guild ID to VoiceChannel","type":[[["Collection",".<"],["string",", "],["VoiceChannel",">"]]],"meta":{"line":29,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel","params":[{"name":"channel","description":"The channel to join","type":[[["VoiceChannel"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"meta":{"line":48,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"joinChannel","description":"Sets up a request to join a voice channel","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise",".<"],["VoiceConnection",">"]]],"meta":{"line":79,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":11,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"PendingVoiceConnection","description":"Represents a Pending Voice Connection","access":"private","props":[{"name":"voiceManager","description":"The ClientVoiceManager that instantiated this pending connection","type":[[["ClientVoiceManager"]]],"meta":{"line":128,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"channel","description":"The channel that this pending voice connection will attempt to join","type":[[["VoiceChannel"]]],"meta":{"line":134,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"deathTimer","description":"The timeout that will be invoked after 15 seconds signifying a failure to connect","type":[[["Timeout"]]],"meta":{"line":140,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"data","description":"An object containing data required to connect to the voice servers with","type":[[["object"]]],"meta":{"line":147,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the the voice servers","params":[{"name":"token","description":"the token","type":[[["string"]]]},{"name":"endpoint","description":"the endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":167,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection","params":[{"name":"sessionID","description":"the session ID","type":[[["string"]]]}],"meta":{"line":202,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"upgrade","description":"Upgrades this Pending Connection to a full Voice Connection","returns":[[["VoiceConnection"]]],"meta":{"line":243,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":120,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r  // you can play a file or a stream here:\r  connection.playFile('./file.mp3').then(dispatcher => {\r\r  });\r});\r```","extends":["EventEmitter"],"props":[{"name":"passes","description":"How many passes the dispatcher should take when sending packets to reduce packet loss. Values over 5\raren't recommended, as it means you are using 5x more bandwidth. You _can_ edit this at runtime.","type":[[["number"]]],"meta":{"line":41,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether playing is paused","type":[[["boolean"]]],"meta":{"line":47,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"time","description":"How long the stream dispatcher has been \"speaking\" for","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The total time, taking into account pauses and skips, that the dispatcher has been streaming for","readonly":true,"type":[[["number"]]],"meta":{"line":66,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volume","description":"The volume of the stream, relative to the stream's input volume","readonly":true,"type":[[["number"]]],"meta":{"line":75,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":83,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolumeDecibels","description":"Set the volume in decibels","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":91,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolumeLogarithmic","description":"Set the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":99,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pause","description":"Stops sending voice packets to the voice connection (stream may still progress however)","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes sending voice packets to the voice connection (may be further on in the stream than when paused)","meta":{"line":113,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Stops the current stream permanently and emits an `end` event.","meta":{"line":120,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"events":[{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":126,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the dispatcher starts streaming","meta":{"line":198,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Emitted once the stream has ended. Attach a `once` listener to this.","meta":{"line":239,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"error","description":"Emitted once the stream has encountered an error. Attach a `once` listener to this. Also emits `end`.","params":[{"name":"err","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":248,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted when the stream wants to give debug information.","params":[{"name":"information","description":"The debug information","type":[[["string"]]]}],"meta":{"line":258,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":20,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"AudioPlayer","description":"Represents the Audio Player of a Voice Connection","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection the player belongs to","type":[[["VoiceConnection"]]],"meta":{"line":18,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"dispatcher","description":"The current stream dispatcher, if a stream is being played","type":[[["StreamDispatcher"]]],"meta":{"line":26,"file":"AudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":11,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives voice data from a voice connection.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r const receiver = connection.createReceiver();\r});\r```","extends":["EventEmitter"],"props":[{"name":"destroyed","description":"Whether or not this receiver has been destroyed.","type":[[["boolean"]]],"meta":{"line":33,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"voiceConnection","description":"The VoiceConnection that instantiated this","type":[[["VoiceConnection"]]],"meta":{"line":39,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"methods":[{"name":"recreate","description":"If this VoiceReceiver has been destroyed, running `recreate()` will recreate the listener.\rThis avoids you having to create a new receiver.\r<info>Any streams that you had prior to destroying the receiver will not be recreated.</info>","meta":{"line":65,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"destroy","description":"Destroy this VoiceReceiver, also ending any streams that it may be controlling.","meta":{"line":75,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createOpusStream","description":"Creates a readable stream for a user that provides opus data while the user is speaking. When the user\rstops speaking, the stream is destroyed.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":94,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createPCMStream","description":"Creates a readable stream for a user that provides PCM data while the user is speaking. When the user\rstops speaking, the stream is destroyed. The stream is 32-bit signed stereo PCM at 48KHz.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":109,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"warn","description":"Emitted whenever a voice packet cannot be decrypted","params":[{"name":"message","description":"The warning message","type":[[["string"]]]}],"meta":{"line":122,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"opus","description":"Emitted whenever voice data is received from the voice connection. This is _always_ emitted (unlike PCM).","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The opus buffer","type":[[["Buffer"]]]}],"meta":{"line":132,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"pcm","description":"Emits decoded voice data when it's received. For performance reasons, the decoding will only\rhappen if there is at least one `pcm` listener on this receiver.","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The decoded buffer","type":[[["Buffer"]]]}],"meta":{"line":140,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":18,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"SecretKey","description":"Represents a Secret Key used in encryption over voice","access":"private","props":[{"name":"key","description":"The key used for encryption","type":[[["Uint8Array"]]],"meta":{"line":11,"file":"SecretKey.js","path":"src/client/voice/util"}}],"meta":{"line":5,"file":"SecretKey.js","path":"src/client/voice/util"}},{"name":"VoiceConnection","description":"Represents a connection to a Voice Channel in Discord.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r\r});\r```","extends":["EventEmitter"],"props":[{"name":"voiceManager","description":"The Voice Manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":27,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":33,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Whether we're currently transmitting audio","type":[[["boolean"]]],"meta":{"line":39,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receivers","description":"An array of Voice Receivers that have been created for this connection","type":[[["Array",".<"],["VoiceReceiver",">"]]],"meta":{"line":45,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["object"]]],"meta":{"line":52,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":58,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC to speaking values","access":"private","type":[[["Map",".<"],["number",", "],["boolean",">"]]],"meta":{"line":84,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["object"]]],"meta":{"line":91,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\" or not","access":"private","params":[{"name":"value","description":"whether or not to speak","type":[[["boolean"]]]}],"meta":{"line":100,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnect the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":118,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection","access":"private","meta":{"line":140,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playFile","description":"Play the given file in the voice connection.","examples":["// play files natively\rvoiceChannel.join()\r .then(connection => {\r   const dispatcher = connection.playFile('C:/Users/Discord/Desktop/music.mp3');\r })\r .catch(console.error);"],"params":[{"name":"file","description":"The path to the file","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":223,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playStream","description":"Plays and converts an audio stream in the voice connection.","examples":["// play streams using ytdl-core\rconst ytdl = require('ytdl-core');\rconst streamOptions = { seek: 0, volume: 1 };\rvoiceChannel.join()\r .then(connection => {\r   const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', {filter : 'audioonly'});\r   const dispatcher = connection.playStream(stream, streamOptions);\r })\r .catch(console.error);"],"params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":243,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playConvertedStream","description":"Plays a stream of 16-bit signed stereo PCM at 48KHz.","params":[{"name":"stream","description":"The audio stream to play.","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":254,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"createReceiver","description":"Creates a VoiceReceiver so you can start listening to voice data. It's recommended to only create one of these.","returns":[[["VoiceReceiver"]]],"meta":{"line":263,"file":"VoiceConnection.js","path":"src/client/voice"}}],"events":[{"name":"debug","description":"Debug info from the connection","params":[{"name":"message","description":"the debug message","type":[[["string"]]]}],"meta":{"line":61,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection","params":[{"name":"warning","description":"the warning","type":[[["string"]],[["error"]]]}],"meta":{"line":70,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects","meta":{"line":129,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"the encountered error","type":[[["Error"]]]}],"meta":{"line":150,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\rthe connection will already be ready.","meta":{"line":164,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user starts/stops speaking","params":[{"name":"user","description":"The user that has started/stopped speaking","type":[[["User"]]]},{"name":"speaking","description":"Whether or not the user is speaking","type":[[["boolean"]]]}],"meta":{"line":191,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":19,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP Client for a Voice Connection","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":31,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":37,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordAddress","description":"The address of the discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":49,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordPort","description":"The port of the discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":76,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"methods":[{"name":"findEndpointAddress","description":"Tries to resolve the voice server endpoint to an address","returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":84,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"send","description":"Send a packet to the UDP client","params":[{"name":"packet","description":"the packet to send","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["Object",">"]]],"meta":{"line":102,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"meta":{"line":23,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":19,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":25,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"client","description":"The client of this voice websocket","readonly":true,"type":[[["Client"]]],"meta":{"line":42,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":74,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket","meta":{"line":49,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":60,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"the data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":86,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"the packet to send","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":102,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onOpen","description":"Called whenever the WebSocket opens","meta":{"line":114,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket","params":[{"name":"event","description":"the message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":133,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket Server is lost","meta":{"line":144,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"the error that occurred","type":[[["Error"]]]}],"meta":{"line":152,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket","params":[{"name":"packet","description":"the received packet","type":[[["Object"]]]}],"meta":{"line":160,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket","params":[{"name":"interval","description":"the interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":203,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists","meta":{"line":223,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet","meta":{"line":235,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"events":[{"name":"ready","description":"Emitted once the voice websocket receives the ready packet","params":[{"name":"packet","description":"the received packet","type":[[["Object"]]]}],"meta":{"line":164,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session","params":[{"name":"encryptionMode","description":"the type of encryption being used","type":[[["string"]]]},{"name":"secretKey","description":"the secret key used for encryption","type":[[["SecretKey"]]]}],"meta":{"line":172,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a speaking packet is received","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":181,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":189,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"warn","description":"Emitted whenver the voice websocket encounters a non-fatal error","params":[{"name":"warn","description":"the warning","type":[[["string"]]]}],"meta":{"line":209,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"meta":{"line":11,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The Webhook Client","extends":["Webhook"],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"The id of the webhook.","type":[[["string"]]]},{"name":"token","description":"the token of the webhook.","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":28,"file":"WebhookClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":35,"file":"WebhookClient.js","path":"src/client"}},{"name":"resolver","description":"The Data Resolver of the Client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":42,"file":"WebhookClient.js","path":"src/client"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the Webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the Webhook","type":[[["string"]]],"meta":{"line":35,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the Webhook","type":[[["string"]]],"meta":{"line":41,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the Webhook","type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the Webhook belongs to","type":[[["string"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the Webhook belongs to","type":[[["string"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"sendMessage","description":"Send a message with this webhook","inherits":"Webhook#sendMessage","inherited":true,"examples":["// send a message\rwebhook.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send.","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide.","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":87,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook","inherits":"Webhook#sendSlackMessage","inherited":true,"examples":["// send a slack message\rwebhook.sendSlackMessage({\r  'username': 'Wumpus',\r  'attachments': [{\r    'pretext': 'this looks pretty cool',\r    'color': '#F0F',\r    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\r    'footer': 'Powered by sneks',\r    'ts': new Date().getTime() / 1000\r  }]\r}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send.","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":108,"file":"Webhook.js","path":"src/structures"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message with this webhook","inherits":"Webhook#sendTTSMessage","inherited":true,"examples":["// send a TTS message\rwebhook.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":123,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook","inherits":"Webhook#sendFile","inherited":true,"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":136,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook","inherits":"Webhook#sendCode","inherited":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":163,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the Webhook.","inherits":"Webhook#edit","inherited":true,"params":[{"name":"name","description":"The new name for the Webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the Webhook.","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":179,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the Webhook","inherits":"Webhook#delete","inherited":true,"returns":[[["Promise"]]],"meta":{"line":200,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":11,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketManager","description":"The WebSocket Manager of the Client","access":"private","props":[{"name":"client","description":"The Client that instantiated this WebSocketManager","type":[[["Client"]]],"meta":{"line":18,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"packetManager","description":"A WebSocket Packet manager, it handles all the messages","type":[[["PacketManager"]]],"meta":{"line":24,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"status","description":"The status of the WebSocketManager, a type of Constants.Status. It defaults to IDLE.","type":[[["number"]]],"meta":{"line":30,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sessionID","description":"The session ID of the connection, null if not yet available.","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sequence","description":"The packet count of the client, null if not yet available.","nullable":true,"type":[[["number"]]],"meta":{"line":42,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"gateway","description":"The gateway address for this WebSocket connection, null if not yet available.","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"normalReady","description":"Whether READY was emitted normally (all packets received) or not","type":[[["boolean"]]],"meta":{"line":54,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ws","description":"The WebSocket connection to the gateway","nullable":true,"type":[[["WebSocket"]]],"meta":{"line":60,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"disabledEvents","description":"An object with keys that are websocket event names that should be ignored","type":[[["Object"]]],"meta":{"line":66,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"_connect","description":"Connects the client to a given gateway","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]}],"meta":{"line":76,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"send","description":"Sends a packet to the gateway","params":[{"name":"data","description":"An object that can be JSON stringified","type":[[["Object"]]]},{"name":"force","description":"Whether or not to send the packet immediately","default":false,"type":[[["boolean"]]]}],"meta":{"line":103,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventOpen","description":"Run whenever the gateway connections opens up","meta":{"line":145,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_sendResume","description":"Sends a gateway resume packet, in cases of unexpected disconnections.","meta":{"line":154,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_sendNewIdentify","description":"Sends a new identification packet, in cases of new connections or failed reconnections.","meta":{"line":175,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventClose","description":"Run whenever the connection to the gateway is closed, it will try to reconnect the client.","params":[{"name":"event","description":"The received websocket data","type":[[["Object"]]]}],"meta":{"line":194,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventMessage","description":"Run whenever a message is received from the WebSocket. Returns `true` if the message\rwas handled properly.","params":[{"name":"event","description":"The received websocket data","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":213,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventError","description":"Run whenever an error occurs with the WebSocket connection. Tries to reconnect","params":[{"name":"err","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":232,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"checkIfReady","description":"Runs on new packets before `READY` to see if the Client is ready yet, if it is prepares\rthe `READY` event.","meta":{"line":257,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"tryReconnect","description":"Tries to reconnect the client, changing the status to Constants.Status.RECONNECTING.","meta":{"line":282,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":11,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"Shard","description":"Represents a Shard spawned by the ShardingManager.","construct":{"name":"Shard","params":[{"name":"manager","description":"The sharding manager","type":[[["ShardingManager"]]]},{"name":"id","description":"The ID of this shard","type":[[["number"]]]},{"name":"args","description":"Command line arguments to pass to the script","optional":true,"default":"[]","type":[[["array"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":20,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard","type":[[["number"]]],"meta":{"line":26,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"The environment variables for the shard","type":[[["Object"]]],"meta":{"line":32,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard","type":[[["ChildProcess"]]],"meta":{"line":42,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the shard's process.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise",".<"],["Shard",">"]]],"meta":{"line":59,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a Client property value of the shard.","examples":["shard.fetchClientValue('guilds.size').then(count => {\r  console.log(`${count} guilds in shard ${shard.id}`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["*",">"]]],"meta":{"line":77,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script on the shard, in the context of the Client.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":105,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":133,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":9,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process, such as from a ShardingManager","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]}]},"props":[{"name":"id","description":"ID of this shard","readonly":true,"type":[[["number"]]],"meta":{"line":21,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":30,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":39,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a Client property value of each shard.","examples":["client.shard.fetchClientValues('guilds.size').then(results => {\r  console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Array",">"]]],"meta":{"line":57,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":78,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":99,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":121,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class","scope":"static","params":[{"name":"client","description":"Client to use","type":[[["Client"]]]}],"returns":[[["ShardUtil"]]],"meta":{"line":132,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":7,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that can be used to help you spawn shards of your Client. Each shard is completely separate\rfrom the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely.\rIf you do not select an amount of shards, the manager will automatically decide the best amount.\r<warn>The Sharding Manager is still experimental</warn>","extends":["EventEmitter"],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of shards to spawn, or \"auto\"","optional":true,"default":"'auto'","type":[[["number"]],[["string"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning","optional":true,"default":"[]","type":[[["Array",".<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":38,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that this manager is going to spawn","type":[[["number"]],[["string"]]],"meta":{"line":48,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":63,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards.","type":[[["Array",".<"],["string",">"]]],"meta":{"line":69,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":75,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection",".<"],["number",", "],["Shard",">"]]],"meta":{"line":81,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"The ID of the shard to spawn. **This is usually not necessary.**","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Shard",">"]]],"meta":{"line":89,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["number",", "],["Shard",">>"]]],"meta":{"line":107,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"_spawn","description":"Actually spawns shards, unlike that poser above >:(","access":"private","params":[{"name":"amount","description":"Number of shards to spawn","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["number",", "],["Shard",">>"]]],"meta":{"line":130,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Send a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise",".<"],["Array",".<"],["Shard",">>"]]],"meta":{"line":161,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":172,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a Client property value of each shard.","examples":["manager.fetchClientValues('guilds.size').then(results => {\r  console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Array",">"]]],"meta":{"line":187,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"launch","description":"Emitted upon launching a shard","params":[{"name":"shard","description":"Shard that was launched","type":[[["Shard"]]]}],"meta":{"line":92,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":16,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"Channel","description":"Represents any Channel on Discord","props":[{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes the channel","examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":4,"file":"Channel.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord User","extends":["User"],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":16,"file":"ClientUser.js","path":"src/structures"}},{"name":"email","description":"The email of this account","type":[[["string"]]],"meta":{"line":22,"file":"ClientUser.js","path":"src/structures"}},{"name":"friends","description":"A Collection of friends for the logged in user.\r<warn>This is only filled for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":31,"file":"ClientUser.js","path":"src/structures"}},{"name":"blocked","description":"A Collection of blocked users for the logged in user.\r<warn>This is only filled for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":38,"file":"ClientUser.js","path":"src/structures"}},{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":15,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the User","type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the User","type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the User","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":44,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the User is a Bot.","type":[[["boolean"]]],"meta":{"line":50,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar (if they have one, otherwise null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":95,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Set the username of the logged in Client.\r<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\revery hour. Use this sparingly!</info>","examples":["// set username\rclient.user.setUsername('iilukas')\r .then(user => console.log(`My new username is ${user.username}`))\r .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":57,"file":"ClientUser.js","path":"src/structures"}},{"name":"setEmail","description":"If this user is a \"self bot\" or logged in using a normal user's details (which should be avoided), you can set the\remail here.","examples":["// set email\rclient.user.setEmail('bob@gmail.com')\r .then(user => console.log(`My new email is ${user.email}`))\r .catch(console.error);"],"params":[{"name":"email","description":"The new email","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":72,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPassword","description":"If this user is a \"self bot\" or logged in using a normal user's details (which should be avoided), you can set the\rpassword here.","examples":["// set password\rclient.user.setPassword('password123')\r .then(user => console.log('New password set!'))\r .catch(console.error);"],"params":[{"name":"password","description":"The new password","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":87,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Set the avatar of the logged in Client.","examples":["// set avatar\rclient.user.setAvatar('./avatar.png')\r .then(user => console.log(`New avatar set!`))\r .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["FileResolvable"]],[["Base64Resolveable"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":101,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Set the status of the logged in user.","params":[{"name":"status","description":"can be `online`, `idle`, `invisible` or `dnd` (do not disturb)","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":118,"file":"ClientUser.js","path":"src/structures"}},{"name":"setGame","description":"Set the current game of the logged in user.","params":[{"name":"game","description":"the game being played","type":[[["string"]]]},{"name":"streamingURL","description":"an optional URL to a twitch stream, if one is available.","optional":true,"type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":128,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Set/remove the AFK flag for the current user.","params":[{"name":"afk","description":"whether or not the user is AFK.","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":140,"file":"ClientUser.js","path":"src/structures"}},{"name":"addFriend","description":"Send a friend request\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"user","description":"The user to send the friend request to.","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["User",">"]]],"description":"The user the friend request was sent to."},"meta":{"line":150,"file":"ClientUser.js","path":"src/structures"}},{"name":"removeFriend","description":"Remove a friend\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"user","description":"The user to remove from your friends","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["User",">"]]],"description":"The user that was removed"},"meta":{"line":161,"file":"ClientUser.js","path":"src/structures"}},{"name":"createGuild","description":"Creates a guild\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"region","description":"The region for the server","type":[[["string"]]]},{"name":"icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["FileResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise",".<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":174,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Set the full presence of the current user.","params":[{"name":"data","description":"the data to provide","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":192,"file":"ClientUser.js","path":"src/structures"}},{"name":"typingIn","description":"Check whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":115,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":125,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM Channel (if one exists) between the Client and the User. Resolves with the Channel if successful.","inherits":"User#deleteDM","inherited":true,"returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user","inherits":"User#block","inherited":true,"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user","inherits":"User#unblock","inherited":true,"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user","inherits":"User#fetchProfile","inherited":true,"returns":[[["Promise",".<"],["UserProfile",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares username, ID, discriminator, status and the game being played.\rIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"The user to compare","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":202,"file":"User.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","inherits":"User#sendMessage","inherited":true,"implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","inherits":"User#sendTTSMessage","inherited":true,"implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","inherits":"User#sendFile","inherited":true,"implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","inherits":"User#sendCode","inherited":true,"implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":8,"file":"ClientUser.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a Direct Message Channel between two users.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically concatenates the recipient's mention instead of the\rDM channel object.","returns":[[["string"]]],"meta":{"line":35,"file":"DMChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":10,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents a Custom Emoji","props":[{"name":"client","description":"The Client that instantiated this object","type":[[["Client"]]],"meta":{"line":13,"file":"Emoji.js","path":"src/structures"}},{"name":"guild","description":"The Guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":20,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of the Emoji","type":[[["string"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of the Emoji","type":[[["string"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":42,"file":"Emoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":48,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at","readonly":true,"type":[[["number"]]],"meta":{"line":58,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"Emoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":76,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file","readonly":true,"type":[[["string"]]],"meta":{"line":89,"file":"Emoji.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the emoji mention rather than the object.","examples":["// send an emoji:\rconst emoji = guild.emojis.first();\rmsg.reply(`Hello! ${emoji}`);"],"returns":[[["string"]]],"meta":{"line":101,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":7,"file":"Emoji.js","path":"src/structures"}},{"name":"EvaluatedPermissions","description":"The final evaluated permissions for a member in a channel","props":[{"name":"member","description":"The member this permissions refer to","type":[[["GuildMember"]]],"meta":{"line":12,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"raw","description":"A number representing the packed permissions","type":[[["number"]]],"meta":{"line":18,"file":"EvaluatedPermissions.js","path":"src/structures"}}],"methods":[{"name":"serialize","description":"Get an object mapping permission name, e.g. `READ_MESSAGES` to a boolean - whether the user\rcan perform this or not.","returns":[[["Object",".<"],["string",", "],["boolean",">"]]],"meta":{"line":26,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.","params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks whether the user has all specified permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":52,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the user has all specified permissions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["array"]]],"meta":{"line":62,"file":"EvaluatedPermissions.js","path":"src/structures"}}],"meta":{"line":6,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"GroupDMChannel","description":"Represents a Group DM on Discord","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"name","description":"The name of this Group DM, can be null if one isn't set.","type":[[["string"]]],"meta":{"line":48,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"icon","description":"A hash of the Group DM icon.","type":[[["string"]]],"meta":{"line":54,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this Group DM's owner.","type":[[["string"]]],"meta":{"line":60,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"recipients","description":"A collection of the recipients of this DM, mapped by their ID.","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":67,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"owner","description":"The owner of this Group DM.","readonly":true,"type":[[["User"]]],"meta":{"line":85,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this channel equals another channel. It compares all properties, so for most operations\rit is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"channel","description":"The channel to compare to","type":[[["GroupDMChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":96,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Channel's name instead of the Channel object.","examples":["// logs: Hello from My Group DM!\rconsole.log(`Hello from ${channel}!`);","// logs: Hello from My Group DM!\rconsole.log(`Hello from ' + channel + '!');"],"returns":[[["string"]]],"meta":{"line":122,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":33,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"Guild","description":"Represents a Guild (or a Server) on Discord.\r<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\rcheck this with `guild.available`.</info>","props":[{"name":"client","description":"The Client that created the instance of the the Guild.","type":[[["Client"]]],"meta":{"line":22,"file":"Guild.js","path":"src/structures"}},{"name":"members","description":"A Collection of members that are in this Guild. The key is the member's ID, the value is the member.","type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":29,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A Collection of channels that are in this Guild. The key is the channel's ID, the value is the channel.","type":[[["Collection",".<"],["string",", "],["GuildChannel",">"]]],"meta":{"line":35,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A Collection of roles that are in this Guild. The key is the role's ID, the value is the role.","type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":41,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the Guild is available to access. If it is not available, it indicates a server outage.","type":[[["boolean"]]],"meta":{"line":49,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the Guild, useful for comparisons.","type":[[["string"]]],"meta":{"line":55,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":72,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon, or null if there is no icon.","nullable":true,"type":[[["string"]]],"meta":{"line":78,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image, or null if no splash (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":84,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":90,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this Guild as of `READY`","type":[[["number"]]],"meta":{"line":96,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":102,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this Guild","type":[[["Collection",".<"],["string",", "],["Presence",">"]]],"meta":{"line":108,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features.","type":[[["Array",".<"],["Object",">"]]],"meta":{"line":114,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A Collection of emojis that are in this Guild. The key is the emoji's ID, the value is the emoji.","type":[[["Collection",".<"],["string",", "],["Emoji",">"]]],"meta":{"line":120,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\".","nullable":true,"type":[[["number"]]],"meta":{"line":127,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved.","nullable":true,"type":[[["string"]]],"meta":{"line":133,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild.","type":[[["boolean"]]],"meta":{"line":139,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild.","type":[[["number"]]],"meta":{"line":145,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":151,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner.","type":[[["string"]]],"meta":{"line":167,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":212,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created","readonly":true,"type":[[["Date"]]],"meta":{"line":221,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":230,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"Gets the URL to this guild's icon (if it has one, otherwise it returns null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":239,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the Guild","readonly":true,"type":[[["GuildMember"]]],"meta":{"line":249,"file":"Guild.js","path":"src/structures"}},{"name":"voiceConnection","description":"If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection.","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":258,"file":"Guild.js","path":"src/structures"}},{"name":"defaultChannel","description":"The `#general` GuildChannel of the server.","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":267,"file":"Guild.js","path":"src/structures"}}],"methods":[{"name":"setup","description":"Sets up the Guild","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":67,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the User is present in the guild.","examples":["// get the guild member of a user\rconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":279,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetch a Collection of banned users in this Guild.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["User",">>"]]],"meta":{"line":287,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetch a Collection of invites to this Guild. Resolves with a Collection mapping invites by their codes.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Invite",">>"]]],"meta":{"line":295,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetch all webhooks for the guild.","returns":[[["Collection",".<"],["Webhook",">"]]],"meta":{"line":303,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMember","description":"Fetch a single guild member from a user.","params":[{"name":"user","description":"The user to fetch the member for","type":[[["UserResolvable"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":312,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMembers","description":"Fetches all the members in the Guild, even if they are offline. If the Guild has less than 250 members,\rthis should not be necessary.","params":[{"name":"query","description":"An optional query to provide when fetching members","optional":true,"default":"''","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":326,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the Guild with new information - e.g. a new name.","examples":["// set the guild name and region\rguild.edit({\r name: 'Discord Guild',\r region: 'london',\r})\r.then(updated => console.log(`New guild name ${updated.name} in region ${updated.region}`))\r.catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":360,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edit the name of the Guild.","examples":["// edit the guild name\rguild.setName('Discord Guild')\r .then(updated => console.log(`Updated guild name to ${guild.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name of the Guild","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":374,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edit the region of the Guild.","examples":["// edit the guild region\rguild.setRegion('london')\r .then(updated => console.log(`Updated guild region to ${guild.region}`))\r .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild.","type":[[["Region"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":388,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edit the verification level of the Guild.","examples":["// edit the guild verification level\rguild.setVerificationLevel(1)\r .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\r .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["VerificationLevel"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":402,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edit the AFK channel of the Guild.","examples":["// edit the guild AFK channel\rguild.setAFKChannel(channel)\r .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel}`))\r .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["GuildChannelResolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":416,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edit the AFK timeout of the Guild.","examples":["// edit the guild AFK channel\rguild.setAFKTimeout(60)\r .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\r .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":430,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Set a new Guild Icon.","examples":["// edit the guild icon\rguild.setIcon(fs.readFileSync('./icon.png'))\r .then(updated => console.log('Updated the guild icon'))\r .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":444,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the Guild.","examples":["// edit the guild owner\rguild.setOwner(guilds.members[0])\r .then(updated => console.log(`Updated the guild owner to ${updated.owner.username}`))\r .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the Guild","type":[[["GuildMemberResolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":458,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Set a new Guild Splash Logo.","examples":["// edit the guild splash\rguild.setIcon(fs.readFileSync('./splash.png'))\r .then(updated => console.log('Updated the guild splash'))\r .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":472,"file":"Guild.js","path":"src/structures"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// ban a user\rguild.ban('123123123123');"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"deleteDays","description":"The amount of days worth of messages from this user that should\ralso be deleted. Between `0` and `7`.","optional":true,"default":0,"type":[[["number"]]]}],"returns":{"types":[[["Promise",".<("],["GuildMember","|"],["User","|"],["string",")>"]]],"description":"Result object will be resolved as specifically as possible.\rIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\rbe resolved, the user ID will be the result."},"meta":{"line":488,"file":"Guild.js","path":"src/structures"}},{"name":"unban","description":"Unbans a user from the Guild.","examples":["// unban a user\rguild.unban('123123123123')\r .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\r .catch(reject);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]}],"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":502,"file":"Guild.js","path":"src/structures"}},{"name":"pruneMembers","description":"Prunes members from the guild based on how long they have been inactive.","examples":["// see how many members will be pruned\rguild.pruneMembers(12, true)\r  .then(pruned => console.log(`This will prune ${pruned} people!`);\r  .catch(console.error);","// actually prune the members\rguild.pruneMembers(12)\r  .then(pruned => console.log(`I just pruned ${pruned} people!`);\r  .catch(console.error);"],"params":[{"name":"days","description":"Number of days of inactivity required to kick","type":[[["number"]]]},{"name":"dry","description":"If true, will return number of users that will be kicked, without actually doing it","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise",".<"],["number",">"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":522,"file":"Guild.js","path":"src/structures"}},{"name":"sync","description":"Syncs this guild (already done automatically every 30 seconds). Only applicable to user accounts.","meta":{"line":530,"file":"Guild.js","path":"src/structures"}},{"name":"createChannel","description":"Creates a new Channel in the Guild.","examples":["// create a new text channel\rguild.createChannel('new-general', 'text')\r .then(channel => console.log(`Created new channel ${channel}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"type","description":"The type of the new channel, either `text` or `voice`","type":[[["string"]]]}],"returns":[[["Promise",".<("],["TextChannel","|"],["VoiceChannel",")>"]]],"meta":{"line":545,"file":"Guild.js","path":"src/structures"}},{"name":"createRole","description":"Creates a new role in the guild, and optionally updates it with the given information.","examples":["// create a new role\rguild.createRole()\r .then(role => console.log(`Created role ${role}`))\r .catch(console.error);","// create a new role with data\rguild.createRole({ name: 'Super Cool People' })\r  .then(role => console.log(`Created role ${role}`))\r  .catch(console.error)"],"params":[{"name":"data","description":"The data to update the role with","optional":true,"type":[[["RoleData"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":564,"file":"Guild.js","path":"src/structures"}},{"name":"createEmoji","description":"Creates a new custom emoji in the guild.","examples":["// create a new emoji from a url\rguild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')\r .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\r .catch(console.error);","// create a new emoji from a file on your computer\rguild.createEmoji('./memes/banana.png', 'banana')\r .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\r .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji.","type":[[["FileResolveable"]]]},{"name":"name","description":"The name for the emoji.","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Emoji",">"]]],"description":"The created emoji."},"meta":{"line":586,"file":"Guild.js","path":"src/structures"}},{"name":"deleteEmoji","description":"Delete an emoji.","params":[{"name":"emoji","description":"The emoji to delete.","type":[[["Emoji"]],[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":602,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Causes the Client to leave the guild.","examples":["// leave a guild\rguild.leave()\r .then(g => console.log(`Left the guild ${g}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":616,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Causes the Client to delete the guild.","examples":["// delete a guild\rguild.delete()\r .then(g => console.log(`Deleted the guild ${g}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":629,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePosition","description":"Set the position of a role in this guild","params":[{"name":"role","description":"the role to edit, can be a role object or a role ID.","type":[[["string"]],[["Role"]]]},{"name":"position","description":"the new position of the role","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":639,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this Guild equals another Guild. It compares all properties, so for most operations\rit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"guild","description":"The guild to compare","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":666,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Guild's name instead of the Guild object.","examples":["// logs: Hello from My Guild!\rconsole.log(`Hello from ${guild}!`);","// logs: Hello from My Guild!\rconsole.log(`Hello from ' + guild + '!');"],"returns":[[["string"]]],"meta":{"line":703,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":16,"file":"Guild.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a Guild Channel (i.e. Text Channels and Voice Channels)","extends":["Channel"],"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a Member of a Guild on Discord","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The client that instantiated this GuildMember","type":[[["Client"]]],"meta":{"line":18,"file":"GuildMember.js","path":"src/structures"}},{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":25,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance Represents","type":[[["User"]]],"meta":{"line":31,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","type":[[["boolean"]]],"meta":{"line":42,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","type":[[["boolean"]]],"meta":{"line":48,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","type":[[["boolean"]]],"meta":{"line":54,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","type":[[["boolean"]]],"meta":{"line":60,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceSessionID","description":"The voice session ID of this member, if any","nullable":true,"type":[[["string"]]],"meta":{"line":66,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannelID","description":"The voice channel ID of this member, if any","nullable":true,"type":[[["string"]]],"meta":{"line":72,"file":"GuildMember.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is speaking","type":[[["boolean"]]],"meta":{"line":78,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this Guild Member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":84,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","type":[[["number"]]],"meta":{"line":90,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the member joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":101,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this Guild Member","readonly":true,"type":[[["Presence"]]],"meta":{"line":110,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A list of roles that are applied to this GuildMember, mapped by the role ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":119,"file":"GuildMember.js","path":"src/structures"}},{"name":"highestRole","description":"The role of the member with the highest position.","readonly":true,"type":[[["Role"]]],"meta":{"line":138,"file":"GuildMember.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is muted in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":147,"file":"GuildMember.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is deafened in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":156,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannel","description":"The voice channel this member is in, if any","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":165,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this User","readonly":true,"type":[[["string"]]],"meta":{"line":174,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for the guild member, taking only roles into account","readonly":true,"type":[[["EvaluatedPermissions"]]],"meta":{"line":183,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether the member is kickable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":201,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether the member is bannable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":214,"file":"GuildMember.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns evaluated permissions for a member in a guild channel.","params":[{"name":"channel","description":"Guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":227,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of the member's roles have a permission.","params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the roles to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":239,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks whether the roles of the member allows them to perform specific actions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":250,"file":"GuildMember.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["array"]]],"meta":{"line":261,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edit a Guild Member","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildmemberEditData"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildMember.js","path":"src/structures"}},{"name":"setMute","description":"Mute/unmute a user","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":279,"file":"GuildMember.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafen/undeafen a user","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":288,"file":"GuildMember.js","path":"src/structures"}},{"name":"setVoiceChannel","description":"Moves the Guild Member to the given channel.","params":[{"name":"channel","description":"The channel to move the member to","type":[[["ChannelResolvable"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":297,"file":"GuildMember.js","path":"src/structures"}},{"name":"setRoles","description":"Sets the Roles applied to the member.","params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":306,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRole","description":"Adds a single Role to the member.","params":[{"name":"role","description":"The role or ID of the role to add","type":[[["Role"]],[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":315,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRoles","description":"Adds multiple roles to the member.","params":[{"name":"roles","description":"The roles or role IDs to add","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":324,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRole","description":"Removes a single Role from the member.","params":[{"name":"role","description":"The role or ID of the role to remove","type":[[["Role"]],[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":340,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRoles","description":"Removes multiple roles from the member.","params":[{"name":"roles","description":"The roles or role IDs to remove","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":349,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Set the nickname for the Guild Member","params":[{"name":"nick","description":"The nickname for the Guild Member","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":370,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this Guild Member","returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":378,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kick this member from the Guild","returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":386,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Ban this Guild Member","examples":["// ban a guild member\rguildMember.ban(7);"],"params":[{"name":"deleteDays","description":"The amount of days worth of messages from this member that should\ralso be deleted. Between `0` and `7`.","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":399,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the Member object.","examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":410,"file":"GuildMember.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":12,"file":"GuildMember.js","path":"src/structures"}},{"name":"Invite","description":"Represents an Invitation to a Guild Channel.\r<warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>","props":[{"name":"client","description":"The client that instantiated the invite","type":[[["Client"]]],"meta":{"line":36,"file":"Invite.js","path":"src/structures"}},{"name":"guild","description":"The Guild the invite is for. If this Guild is already known, this will be a Guild object. If the Guild is\runknown, this will be a Partial Guild.","type":[[["Guild"]],[["PartialGuild"]]],"meta":{"line":48,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":54,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","type":[[["boolean"]]],"meta":{"line":60,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds","nullable":true,"type":[[["number"]]],"meta":{"line":66,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","type":[[["number"]]],"meta":{"line":72,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","type":[[["number"]]],"meta":{"line":78,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","type":[[["User"]]],"meta":{"line":85,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The Channel the invite is for. If this Channel is already known, this will be a GuildChannel object.\rIf the Channel is unknown, this will be a Partial Guild Channel.","type":[[["GuildChannel"]],[["PartialGuildChannel"]]],"meta":{"line":93,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","type":[[["number"]]],"meta":{"line":99,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created","readonly":true,"type":[[["Date"]]],"meta":{"line":107,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"type":[[["number"]]],"meta":{"line":116,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire","readonly":true,"type":[[["Date"]]],"meta":{"line":125,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":134,"file":"Invite.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite","returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":142,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Invite's URL instead of the object.","examples":["// logs: Invite: https://discord.gg/A1b2C3\rconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":153,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":30,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a Message on Discord","props":[{"name":"client","description":"The client that instantiated the Message","type":[[["Client"]]],"meta":{"line":16,"file":"Message.js","path":"src/structures"}},{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]],"meta":{"line":23,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message (unique in the channel it was sent)","type":[[["string"]]],"meta":{"line":33,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["string"]]],"meta":{"line":39,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":45,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","type":[[["User"]]],"meta":{"line":51,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the Author of the message as a Guild Member. Only available if the message comes from a Guild\rwhere the author is still a member.","type":[[["GuildMember"]]],"meta":{"line":58,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":64,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":70,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number used for checking message delivery","type":[[["string"]]],"meta":{"line":76,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":82,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array",".<"],["Embed",">"]]],"meta":{"line":88,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID.","type":[[["Collection",".<"],["string",", "],["MessageAttachment",">"]]],"meta":{"line":94,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"An object containing a further users, roles or channels collections","type":[[["Object"]]],"props":[{"name":"mentions.users","description":"Mentioned users, maps their ID to the user object.","type":[[["Collection",".<"],["string",", "],["User",">"]]]},{"name":"mentions.roles","description":"Mentioned roles, maps their ID to the role object.","type":[[["Collection",".<"],["string",", "],["Role",">"]]]},{"name":"mentions.channels","description":"Mentioned channels,\rmaps their ID to the channel object.","type":[[["Collection",".<"],["string",", "],["GuildChannel",">"]]]},{"name":"mentions.everyone","description":"Whether or not @everyone was mentioned.","type":[[["boolean"]]]}],"meta":{"line":118,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent","readonly":true,"type":[[["Date"]]],"meta":{"line":209,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":218,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":227,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text. If mentions cannot be resolved to a name,\rthe relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":237,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version.\rSorted from latest (first) to oldest (last).","readonly":true,"type":[[["Array",".<"],["Message",">"]]],"meta":{"line":275,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":284,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":293,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":304,"file":"Message.js","path":"src/structures"}}],"methods":[{"name":"isMentioned","description":"Whether or not a user, channel or role is mentioned in this message.","params":[{"name":"data","description":"either a guild channel, user or a role object, or a string representing\rthe ID of any of these.","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":315,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edit the content of the message","examples":["// update the content of a message\rmessage.edit('This is my new content!')\r .then(msg => console.log(`Updated the content of a message from ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":330,"file":"Message.js","path":"src/structures"}},{"name":"editCode","description":"Edit the content of the message, with a code block","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"The new content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":340,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":349,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":357,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message","examples":["// delete a message\rmessage.delete()\r .then(msg => console.log(`Deleted message from ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":371,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Reply to the message","examples":["// reply to a message\rmessage.reply('Hey, I'm a reply!')\r .then(msg => console.log(`Sent a reply to ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":392,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\rwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\rmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":413,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Message's content instead of the object.","examples":["// logs: Message: This is a message!\rconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":442,"file":"Message.js","path":"src/structures"}}],"meta":{"line":10,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an Attachment in a Message","props":[{"name":"client","description":"The Client that instantiated this Message.","type":[[["Client"]]],"meta":{"line":10,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"message","description":"The message this attachment is part of.","type":[[["Message"]]],"meta":{"line":17,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["string"]]],"meta":{"line":27,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filename","description":"The file name of this attachment","type":[[["string"]]],"meta":{"line":33,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filesize","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":39,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":45,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":51,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":57,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":4,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages based on a specified filter, then emits them.","extends":["EventEmitter"],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel to collect messages in","type":[[["Channel"]]]},{"name":"filter","description":"The filter function","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Options for the collector","optional":true,"type":[[["CollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel this collector is operating on","type":[[["Channel"]]],"meta":{"line":42,"file":"MessageCollector.js","path":"src/structures"}},{"name":"filter","description":"A function used to filter messages that the collector collects.","type":[[["CollectorFilterFunction"]]],"meta":{"line":48,"file":"MessageCollector.js","path":"src/structures"}},{"name":"options","description":"Options for the collecor.","type":[[["CollectorOptions"]]],"meta":{"line":54,"file":"MessageCollector.js","path":"src/structures"}},{"name":"ended","description":"Whether this collector has stopped collecting Messages.","type":[[["boolean"]]],"meta":{"line":60,"file":"MessageCollector.js","path":"src/structures"}},{"name":"collected","description":"A collection of collected messages, mapped by message ID.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":66,"file":"MessageCollector.js","path":"src/structures"}},{"name":"next","description":"Returns a promise that resolves when a valid message is sent. Rejects\rwith collected messages if the Collector ends before receiving a message.","readonly":true,"type":[[["Promise",".<"],["Message",">"]]],"meta":{"line":103,"file":"MessageCollector.js","path":"src/structures"}}],"methods":[{"name":"verify","description":"Verifies a message against the filter and options","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":79,"file":"MessageCollector.js","path":"src/structures"}},{"name":"stop","description":"Stops the collector and emits `end`.","params":[{"name":"reason","description":"An optional reason for stopping the collector","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":134,"file":"MessageCollector.js","path":"src/structures"}}],"events":[{"name":"message","description":"Emitted whenever the Collector receives a Message that passes the filter test.","params":[{"name":"message","description":"The received message","type":[[["Message"]]]},{"name":"collector","description":"The collector the message passed through","type":[[["MessageCollector"]]]}],"meta":{"line":83,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the Collector stops collecting.","params":[{"name":"collection","description":"A collection of messages collected\rduring the lifetime of the Collector, mapped by the ID of the Messages.","type":[[["Collection",".<"],["string",", "],["Message",">"]]]},{"name":"reason","description":"The reason for the end of the collector. If it ended because it reached the specified time\rlimit, this would be `time`. If you invoke `.stop()` without specifying a reason, this would be `user`. If it\rended because it reached its message limit, it will be `limit`.","type":[[["string"]]]}],"meta":{"line":138,"file":"MessageCollector.js","path":"src/structures"}}],"meta":{"line":8,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in an image - e.g. preview of image","props":[{"name":"client","description":"The client that instantiated this embed","type":[[["Client"]]],"meta":{"line":10,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"message","description":"The message this embed is part of","type":[[["Message"]]],"meta":{"line":17,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed, if there is one","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"type","description":"The type of this embed","type":[[["string"]]],"meta":{"line":33,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed, if there is one","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","type":[[["string"]]],"meta":{"line":45,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed, if there is one","type":[[["MessageEmbedThumbnail"]]],"meta":{"line":51,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed, if there is one","type":[[["MessageEmbedAuthor"]]],"meta":{"line":57,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed, if there is one","type":[[["MessageEmbedProvider"]]],"meta":{"line":63,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":4,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedThumbnail","description":"Represents a thumbnail for a Message embed","props":[{"name":"embed","description":"The embed this thumbnail is part of","type":[[["MessageEmbed"]]],"meta":{"line":76,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL for this thumbnail","type":[[["string"]]],"meta":{"line":86,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL for this thumbnail","type":[[["string"]]],"meta":{"line":92,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"height","description":"The height of the thumbnail","type":[[["number"]]],"meta":{"line":98,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"width","description":"The width of the thumbnail","type":[[["number"]]],"meta":{"line":104,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":70,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedProvider","description":"Represents a Provider for a Message embed","props":[{"name":"embed","description":"The embed this provider is part of","type":[[["MessageEmbed"]]],"meta":{"line":117,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this provider","type":[[["string"]]],"meta":{"line":127,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this provider","type":[[["string"]]],"meta":{"line":133,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":111,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedAuthor","description":"Represents a Author for a Message embed","props":[{"name":"embed","description":"The embed this author is part of","type":[[["MessageEmbed"]]],"meta":{"line":146,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this author","type":[[["string"]]],"meta":{"line":156,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this author","type":[[["string"]]],"meta":{"line":162,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":140,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"PartialGuild","description":"Represents a Guild that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuild","type":[[["Client"]]],"meta":{"line":17,"file":"PartialGuild.js","path":"src/structures"}},{"name":"id","description":"The ID of this guild","type":[[["string"]]],"meta":{"line":28,"file":"PartialGuild.js","path":"src/structures"}},{"name":"name","description":"The name of this guild","type":[[["string"]]],"meta":{"line":34,"file":"PartialGuild.js","path":"src/structures"}},{"name":"icon","description":"The hash of this guild's icon, or null if there is none.","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"PartialGuild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image, or null if no splash (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":46,"file":"PartialGuild.js","path":"src/structures"}}],"meta":{"line":11,"file":"PartialGuild.js","path":"src/structures"}},{"name":"PartialGuildChannel","description":"Represents a Guild Channel that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuildChannel","type":[[["Client"]]],"meta":{"line":16,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"id","description":"The ID of this Guild Channel","type":[[["string"]]],"meta":{"line":27,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of this Guild Channel","type":[[["string"]]],"meta":{"line":33,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of this Guild Channel - `text` or `voice`","type":[[["string"]]],"meta":{"line":39,"file":"PartialGuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a Role or Member in a Guild Channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","type":[[["GuildChannel"]]],"meta":{"line":10,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a User ID or a Role ID","type":[[["string"]]],"meta":{"line":20,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["string"]]],"meta":{"line":26,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Delete this Permission Overwrite.","returns":[[["Promise",".<"],["PermissionOverwrites",">"]]],"meta":{"line":36,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":4,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a User's presence","props":[{"name":"status","description":"The status of the presence:\r\r* **`online`** - user is online\r* **`offline`** - user is offline or invisible\r* **`idle`** - user is AFK\r* **`dnd`** - user is in Do not Disturb","type":[[["string"]]],"meta":{"line":18,"file":"Presence.js","path":"src/structures"}},{"name":"game","description":"The game that the user is playing, `null` if they aren't playing a game.","nullable":true,"type":[[["Game"]]],"meta":{"line":24,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another","params":[{"name":"other","description":"the presence to compare","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":4,"file":"Presence.js","path":"src/structures"}},{"name":"Game","description":"Represents a Game that is part of a User's presence.","props":[{"name":"name","description":"The name of the game being played","type":[[["string"]]],"meta":{"line":55,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the game status","type":[[["number"]]],"meta":{"line":61,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the game is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":67,"file":"Presence.js","path":"src/structures"}},{"name":"streaming","description":"Whether or not the game is being streamed","readonly":true,"type":[[["boolean"]]],"meta":{"line":75,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this game is equal to another game","params":[{"name":"other","description":"the other game to compare","type":[[["Game"]]]}],"returns":[[["boolean"]]],"meta":{"line":84,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":49,"file":"Presence.js","path":"src/structures"}},{"name":"Role","description":"Represents a Role on Discord","props":[{"name":"client","description":"The client that instantiated the role","type":[[["Client"]]],"meta":{"line":12,"file":"Role.js","path":"src/structures"}},{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["string"]]],"meta":{"line":29,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":35,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":41,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":47,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","type":[[["number"]]],"meta":{"line":53,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The evaluated permissions number","type":[[["number"]]],"meta":{"line":59,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":65,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":71,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":79,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created","readonly":true,"type":[[["Date"]]],"meta":{"line":88,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag.","readonly":true,"type":[[["string"]]],"meta":{"line":97,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role.","readonly":true,"type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":108,"file":"Role.js","path":"src/structures"}}],"methods":[{"name":"serialize","description":"Get an object mapping permission names to whether or not the role enables that permission","examples":["// print the serialized role\rconsole.log(role.serialize());"],"returns":[[["Object",".<"],["string",", "],["boolean",">"]]],"meta":{"line":119,"file":"Role.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if the role has a permission.","examples":["// see if a role can ban a member\rif (role.hasPermission('BAN_MEMBERS')) {\r  console.log('This role can ban members');\r} else {\r  console.log('This role can\\'t ban members');\r}"],"params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks if the role has all specified permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":152,"file":"Role.js","path":"src/structures"}},{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the this role's position is lower (other role's is higher),\rpositive number if the this one is higher (other's is lower), 0 if equal"},"meta":{"line":162,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role","examples":["// edit a role\rrole.edit({name: 'new role'})\r .then(r => console.log(`Edited role ${r}`))\r .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":176,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the role","examples":["// set the name of the role\rrole.setName('new role')\r .then(r => console.log(`Edited name of role ${r}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":190,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Set a new color for the role","examples":["// set the color of a role\rrole.setColor('#FF0000')\r .then(r => console.log(`Set color of role ${r}`))\r .catch(console.error);"],"params":[{"name":"color","description":"The new color for the role, either a hex string or a base 10 number","type":[[["number"]],[["string"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":204,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Set whether or not the role should be hoisted","examples":["// set the hoist of the role\rrole.setHoist(true)\r .then(r => console.log(`Role hoisted: ${r.hoist}`))\r .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":218,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Set the position of the role","examples":["// set the position of the role\rrole.setPosition(1)\r .then(r => console.log(`Role position: ${r.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":232,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Set the permissions of the role","examples":["// set the permissions of the role\rrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\r .then(r => console.log(`Role updated ${r}`))\r .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":246,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Set whether this role is mentionable","examples":["// make the role mentionable\rrole.setMentionable(true)\r .then(r => console.log(`Role updated ${r}`))\r .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":260,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role","examples":["// delete a role\rrole.delete()\r .then(r => console.log(`Deleted role ${r}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":273,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\rit is advisable to just compare `role.id === role2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"role","description":"The role to compare to","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":284,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Role mention rather than the Role object.","returns":[[["string"]]],"meta":{"line":299,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\rpositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":310,"file":"Role.js","path":"src/structures"}}],"meta":{"line":6,"file":"Role.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a Server Text Channel on Discord.","extends":["GuildChannel"],"implements":["TextBasedChannel"],"props":[{"name":"topic","description":"The topic of the Text Channel, if there is one.","nullable":true,"type":[[["string"]]],"meta":{"line":25,"file":"TextChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":35,"file":"TextChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"fetchWebhooks","description":"Fetch all webhooks for the channel.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Webhook",">>"]]],"meta":{"line":49,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Create a webhook for the channel.","examples":["channel.createWebhook('Snek', 'http://snek.s3.amazonaws.com/topSnek.png')\r .then(webhook => console.log(`Created Webhook ${webhook}`))\r .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook.","type":[[["string"]]]},{"name":"avatar","description":"The avatar for the webhook.","type":[[["FileResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["Webhook",">"]]],"description":"webhook The created webhook."},"meta":{"line":63,"file":"TextChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","inherits":"GuildChannel#setName","inherited":true,"examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","inherits":"GuildChannel#createInvite","inherited":true,"params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a User on Discord.","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":15,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the User","type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the User","type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the User","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":44,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the User is a Bot.","type":[[["boolean"]]],"meta":{"line":50,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar (if they have one, otherwise null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":95,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"typingIn","description":"Check whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":115,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":125,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM Channel (if one exists) between the Client and the User. Resolves with the Channel if successful.","returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"addFriend","description":"Sends a friend request to the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":142,"file":"User.js","path":"src/structures"}},{"name":"removeFriend","description":"Removes the user from your friends","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":150,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user","returns":[[["Promise",".<"],["UserProfile",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares username, ID, discriminator, status and the game being played.\rIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"The user to compare","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the User object.","examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":202,"file":"User.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":9,"file":"User.js","path":"src/structures"}},{"name":"UserConnection","description":"Represents a User Connection object (or \"platform identity\")","props":[{"name":"user","description":"The user that owns the Connection","type":[[["User"]]],"meta":{"line":10,"file":"UserConnection.js","path":"src/structures"}},{"name":"type","description":"The type of the Connection","type":[[["string"]]],"meta":{"line":20,"file":"UserConnection.js","path":"src/structures"}},{"name":"name","description":"The username of the connection account","type":[[["string"]]],"meta":{"line":26,"file":"UserConnection.js","path":"src/structures"}},{"name":"id","description":"The id of the connection account","type":[[["string"]]],"meta":{"line":32,"file":"UserConnection.js","path":"src/structures"}},{"name":"revoked","description":"Whether the connection is revoked","type":[[["Boolean"]]],"meta":{"line":38,"file":"UserConnection.js","path":"src/structures"}},{"name":"integrations","description":"an array of partial server integrations (not yet implemented in this lib)","type":[[["Array",".<"],["Object",">"]]],"meta":{"line":44,"file":"UserConnection.js","path":"src/structures"}}],"meta":{"line":4,"file":"UserConnection.js","path":"src/structures"}},{"name":"UserProfile","description":"Represents a user's profile on Discord.","props":[{"name":"user","description":"The owner of the profile","type":[[["User"]]],"meta":{"line":13,"file":"UserProfile.js","path":"src/structures"}},{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":19,"file":"UserProfile.js","path":"src/structures"}},{"name":"mutualGuilds","description":"Guilds that the ClientUser and the User share","type":[[["Collection",".<"],["Guild",">"]]],"meta":{"line":26,"file":"UserProfile.js","path":"src/structures"}},{"name":"connections","description":"The user's connections","type":[[["Collection",".<"],["UserConnection",">"]]],"meta":{"line":32,"file":"UserProfile.js","path":"src/structures"}}],"meta":{"line":7,"file":"UserProfile.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a Server Voice Channel on Discord.","extends":["GuildChannel"],"props":[{"name":"members","description":"The members in this Voice Channel.","type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":16,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":28,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":34,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"connection","description":"The voice connection for this voice channel, if the client is connected","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":42,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Checks if the client has permission join the voice channel","type":[[["boolean"]]],"meta":{"line":52,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","type":[[["boolean"]]],"meta":{"line":60,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel","examples":["// set the bitrate of a voice channel\rvoiceChannel.setBitrate(48000)\r .then(vc => console.log(`Set bitrate to ${vc.bitrate} for ${vc.name}`))\r .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]}],"returns":[[["Promise",".<"],["VoiceChannel",">"]]],"meta":{"line":74,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this Voice Channel","examples":["// join a voice channel\rvoiceChannel.join()\r .then(connection => console.log('Connected!'))\r .catch(console.error);"],"returns":[[["Promise",".<"],["VoiceConnection",">"]]],"meta":{"line":87,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel","examples":["// leave a voice channel\rvoiceChannel.leave();"],"meta":{"line":97,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","inherits":"GuildChannel#setName","inherited":true,"examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","inherits":"GuildChannel#createInvite","inherited":true,"params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":8,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a Webhook","props":[{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the Webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the Webhook","type":[[["string"]]],"meta":{"line":35,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the Webhook","type":[[["string"]]],"meta":{"line":41,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the Webhook","type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the Webhook belongs to","type":[[["string"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the Webhook belongs to","type":[[["string"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"sendMessage","description":"Send a message with this webhook","examples":["// send a message\rwebhook.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send.","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide.","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":87,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook","examples":["// send a slack message\rwebhook.sendSlackMessage({\r  'username': 'Wumpus',\r  'attachments': [{\r    'pretext': 'this looks pretty cool',\r    'color': '#F0F',\r    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\r    'footer': 'Powered by sneks',\r    'ts': new Date().getTime() / 1000\r  }]\r}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send.","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":108,"file":"Webhook.js","path":"src/structures"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message with this webhook","examples":["// send a TTS message\rwebhook.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":123,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook","params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":136,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":163,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the Webhook.","params":[{"name":"name","description":"The new name for the Webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the Webhook.","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":179,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the Webhook","returns":[[["Promise"]]],"meta":{"line":200,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":7,"file":"Webhook.js","path":"src/structures"}},{"name":"Collection","description":"A utility class to help make it easier to access the data stores","extends":["Map"],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you add/remove elements on the array.","examples":["// identical to:\rArray.from(collection.values());"],"returns":[[["Array"]]],"meta":{"line":32,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you add/remove elements on the array.","examples":["// identical to:\rArray.from(collection.keys());"],"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Returns the first item in this collection.","returns":[["*"]],"meta":{"line":54,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Returns the first key in this collection.","returns":[["*"]],"meta":{"line":62,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Returns the last item in this collection. This is a relatively slow operation,\rsince an array copy of the values must be made to find the last element.","returns":[["*"]],"meta":{"line":71,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Returns the last key in this collection. This is a relatively slow operation,\rsince an array copy of the keys must be made to find the last element.","returns":[["*"]],"meta":{"line":81,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Returns a random item from this collection. This is a relatively slow operation,\rsince an array copy of the values must be made to find a random element.","returns":[["*"]],"meta":{"line":91,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Returns a random key from this collection. This is a relatively slow operation,\rsince an array copy of the keys must be made to find a random element.","returns":[["*"]],"meta":{"line":101,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Returns an array of items where `item[prop] === value` of the collection","examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["array"]]],"meta":{"line":114,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Returns a single item where `item[prop] === value`, or the given function returns `true`.\rIn the latter case, this is identical to\r[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":136,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Returns the key of the item where `item[prop] === value`, or the given function returns `true`.\rIn the latter case, this is identical to\r[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":167,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Returns true if the collection has an item where `item[prop] === value`","examples":["if (collection.exists('username', 'Bob')) {\r console.log('user here!');\r}"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":194,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\rbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":206,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":222,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\r[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["array"]]],"meta":{"line":238,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\r[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":253,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\r[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":268,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\r[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce","type":[[["function"]]]},{"name":"startVal","description":"The starting value","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":283,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":295,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"If the items in this collection have a delete method (e.g. messages), invoke\rthe delete method. Returns an array of promises","returns":[[["Array",".<"],["Promise",">"]]],"meta":{"line":309,"file":"Collection.js","path":"src/util"}}],"meta":{"line":5,"file":"Collection.js","path":"src/util"}}],"interfaces":[{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features","props":[{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"methods":[{"name":"sendMessage","description":"Send a message to this channel","examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":11,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"typedefs":[{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\r* A User object\r* A User ID\r* A Message (resolves to the message author)\r* A Guild (owner of the guild)\r* A Guild Member","type":[[["User"]],[["string"]],[["Message"]],[["Guild"]],[["GuildMember"]]],"meta":{"line":25,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\r* A Guild object","type":[[["Guild"]]],"meta":{"line":62,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\r* A GuildMember object\r* A User object","type":[[["Guild"]]],"meta":{"line":79,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel. This can be:\r* An instance of a Channel\r* An instance of a Message (the channel the message was sent in)\r* An instance of a Guild (the #general channel)\r* An ID of a Channel","type":[[["Channel"]],[["Guild"]],[["Message"]],[["string"]]],"meta":{"line":102,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\r* An invite code\r* An invite URL","type":[[["string"]]],"meta":{"line":124,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\r* A string\r* A permission number\r\rPossible strings:\r```js\r[\r  \"CREATE_INSTANT_INVITE\",\r  \"KICK_MEMBERS\",\r  \"BAN_MEMBERS\",\r  \"ADMINISTRATOR\",\r  \"MANAGE_CHANNELS\",\r  \"MANAGE_GUILD\",\r  \"READ_MESSAGES\",\r  \"SEND_MESSAGES\",\r  \"SEND_TTS_MESSAGES\",\r  \"MANAGE_MESSAGES\",\r  \"EMBED_LINKS\",\r  \"ATTACH_FILES\",\r  \"READ_MESSAGE_HISTORY\",\r  \"MENTION_EVERYONE\",\r  \"EXTERNAL_EMOJIS\", // use external emojis\r  \"CONNECT\", // connect to voice\r  \"SPEAK\", // speak on voice\r  \"MUTE_MEMBERS\", // globally mute members on voice\r  \"DEAFEN_MEMBERS\", // globally deafen members on voice\r  \"MOVE_MEMBERS\", // move member's voice channels\r  \"USE_VAD\", // use voice activity detection\r  \"CHANGE_NICKNAME\",\r  \"MANAGE_NICKNAMES\", // change nicknames of others\r  \"MANAGE_ROLES_OR_PERMISSIONS\"\r]\r```","type":[[["string"]],[["number"]]],"meta":{"line":144,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\r* A string\r* An Array (joined with a new line delimiter to give a string)\r* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":192,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\r* A Buffer\r* A Base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":211,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"FileResolvable","description":"Data that can be resolved to give a Buffer. This can be:\r* A Buffer\r* The path to a local file\r* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":228,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"seek","description":"The time to seek to","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at","optional":true,"default":1,"type":[[["number"]]]},{"name":"passes","description":"How many times to send the voice packet to reduce packet loss","optional":true,"default":1,"type":[[["number"]]]}],"meta":{"line":202,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled) or `false` (disabled)\r```js\r{\r 'SEND_MESSAGES': true,\r 'ATTACH_FILES': false,\r}\r```","type":[[["Object"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"InviteOptions","description":"Options given when creating a Guild Channel Invite","type":[[["Object"]]],"props":[{"name":"temporary","description":"Whether the invite should kick users after 24hrs if they are not given a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"maxAge","description":"Time in seconds the invite expires in","optional":true,"default":0,"type":[[["number"]]]},{"name":"maxUses","description":"Maximum amount of uses for this invite","optional":true,"default":0,"type":[[["maxUses"]]]}],"meta":{"line":210,"file":"GuildChannel.js","path":"src/structures"}},{"name":"MessageOptions","description":"Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode, or Message.reply","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\rshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\rit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":26,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"SplitOptions","description":"Options for splitting a message","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":1950,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":37,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\r`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["string"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["string"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["string"]]]}],"meta":{"line":145,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["CollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array",".<"],["string",">"]]]}],"meta":{"line":280,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"CollectorFilterFunction","description":"A function that takes a Message object and a MessageCollector and returns a boolean.\r```js\rfunction(message, collector) {\r if (message.content.includes('discord')) {\r   return true; // passed the filter test\r }\r return false; // failed the filter test\r}\r```","type":[[["function"]]],"meta":{"line":9,"file":"MessageCollector.js","path":"src/structures"}},{"name":"CollectorOptions","description":"An object containing options used to configure a MessageCollector. All properties are optional.","type":[[["Object"]]],"props":[{"name":"time","description":"Duration for the collector in milliseconds","optional":true,"type":[[["number"]]]},{"name":"max","description":"Maximum number of messages to handle","optional":true,"type":[[["number"]]]},{"name":"maxMatches","description":"Maximum number of successfully filtered messages to obtain","optional":true,"type":[[["number"]]]}],"meta":{"line":22,"file":"MessageCollector.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\rshould be replaced with plain-text","optional":true,"default":"this.options.disableEveryone","type":[[["boolean"]]]}],"meta":{"line":68,"file":"Webhook.js","path":"src/structures"}},{"name":"ClientOptions","description":"Options for a Client.","type":[[["Object"]]],"props":[{"name":"apiRequestMethod","description":"'sequential' or 'burst'. Sequential executes all requests in\rthe order they are triggered, whereas burst runs multiple at a time, and doesn't guarantee a particular order.","optional":true,"default":"'sequential'","type":[[["string"]]]},{"name":"shardId","description":"The ID of this shard","optional":true,"default":0,"type":[[["number"]]]},{"name":"shardCount","description":"The number of shards","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel","optional":true,"default":200,"type":[[["number"]]]},{"name":"sync","description":"Whether to periodically sync guilds\r(-1 for unlimited - don't do this without message sweeping, otherwise memory usage will climb indefinitely)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"messageCacheLifetime","description":"How long until a message should be uncached by the message sweeping\r(in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\rthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\rupon joining a guild","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for MessageOptions.disableEveryone","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\rcorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\rprocessed. Disabling useless events such as 'TYPING_START' can result in significant performance increases on\rlarge-scale bots.","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"ws","description":"Options for the websocket","optional":true,"type":[[["WebsocketOptions"]]]}],"meta":{"line":3,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"Websocket options. These are left as snake_case to match the API.","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":40,"file":"Constants.js","path":"src/util"}}],"externals":[]}
